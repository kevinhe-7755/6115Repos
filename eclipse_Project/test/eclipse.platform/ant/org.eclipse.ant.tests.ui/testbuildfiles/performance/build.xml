<?xml version="1.0"?>
<!-- Copyright (C) 1993-2003 SEAGULL -->
<?xm-well_formed path = ""?>
<!-- ===================================================================

Build file for the Transidiom Java components: AIS, IDT, IFT, etc.

Notes:

   - This is a build file for use with the Jakarta Ant build tool.
   - naming guidelines:
     - For properties, the names are generally moduleName.propertyType, e.g. ais.files.
     - For targets, the names are generally action.moduleName, e.g. compile.ais.

Prerequisites:

   jakarta-ant from http://jakarta.apache.org
   A JAXP-compliant XSLT transformer.
     - Xalan, from http://xml.apache.org.
   A JAXP-compliant DOM parser.
     - Xerces, from http://xml.apache.org.

Main targets:

 clean          Removes all the generated files and directories
 clean.classes  Removes all .class files
 compile        Compiles all the sources into ${build.classes}
 dist           Creates the distribution in ${build.dist}
 jars           Creates the jar files in ${build.lib}
 nightly-build  Creates a nightly build (does it all)
 test           Runs the tests.
 test.compile   Compiles the unit tests without triggering any dependencies.
 verify         Verifies the build by performing a load tests on jar files (does not trigger the jar dependencies.)
 zip            Creates the final ${zip-file} (does it all)

TODO:
    Distinguish between compile and runtime classpath:
    - component.classpath.compile
    - component.classpath.rt

Authors:

  Lee Breisacher: lbreisacher@seagullsw.com
  Gary Gregory: ggregory@seagullsw.com

==================================================================== -->
<project default="zip" basedir="." name="transidiom">
    <!-- General properties -->
    <property file="local-build.properties"/>
    <property file="build.properties"/>
    <property name="COMPANY.word" value="SEAGULL"/>
    <property name="product.name" value="Application Interface Server"/>
    <property name="Name" value="Application Interface Server"/>
    <property name="src.root.dir" value=".."/>
    <property name="binary.root.dir" value="${src.root.dir}/../../BinE"/>
    <!-- UGLY!! This creates a dependency to the 'E' tree. Not sure how to solve it, though -->
    <property name="src.dir" value="${src.root.dir}/Source"/>
    <property name="java.resource.dir" value="${src.root.dir}/Resources"/>
    <property name="xslt.resource.dir" value="../../Resources/XSLT"/>
    <property name="fdef.dirname" value="config/functions"/>
    <property name="root.dir" value="${src.root.dir}/Root"/>
    <property name="root.dir.sys" value="${root.dir}/System"/>
    <property name="root.dir.sysdef" value="${root.dir.sys}/Defaults"/>
    <property name="root.dir.server" value="${root.dir}/server"/>
    <property name="root.dir.server-config" value="${root.dir.server}/config"/>
    <property name="root.dir.tools-config" value="${root.dir}/tools/config"/>
    <property name="root.dir.mq" value="${root.dir}/mq"/>
    <property name="root.dir.server-log" value="${root.dir.server-config}/log"/>
    <property name="root.dir.server-transform" value="${root.dir.server-config}/transform"/>
    <property name="root.dir.tools-log" value="${root.dir.tools-config}/log"/>
    <property name="doc.dir" value="${src.root.dir}/Doc/Deliver"/>
    <property name="test.dir" value="${src.root.dir}/Test"/>
    <property name="src.test.dir" value="${test.dir}/Source"/>
    <property name="build.dir" location="${basedir}/../buildoutput"/>
    <property name="build.classes" value="${build.dir}/classes"/>
    <property name="build.etc" value="${build.dir}/etc"/>
    <property name="build.lib" value="${build.dir}/lib"/>
    <property name="build.checksum" location="${build.lib}/checksum"/>
    <property name="all-jars.xml" location="${build.checksum}/all-jars.xml"/>
    <property name="build.dist" value="${build.dir}/dist"/>
    <property name="zipFileBaseName" value="AppInterface"/>
    <property name="thirdparty.dir" value="../../../../ThirdParty"/>
    <property name="modifiedthirdparty.dir" value="../../ModifiedThirdParty"/>
    <property name="sourcesafemirror.dir" value="../../SourceSafeMirror"/>
    <property name="src.sourcesafemirror.dir" value="${sourcesafemirror.dir}/Java/Source"/>
    <!-- 3rd party jar references -->
    <property name="apache.dir" value="${thirdparty.dir}/apache.org"/>
    <property name="xalan.dir" value="${apache.dir}/xalan-j/2.5.1/bin"/>
    <property name="ant.jarname" value="ant.jar"/>
    <property name="ant.jar" value="${apache.dir}/jakarta-ant/1.5.2/${ant.jarname}"/>
    <property name="xerces.jarname" value="xercesImpl.jar"/>
    <property name="xerces.jar" value="${xalan.dir}/${xerces.jarname}"/>
    <property name="xalan.jarname" value="xalan.jar"/>
    <property name="xalan.jar" value="${xalan.dir}/${xalan.jarname}"/>
    <property name="xsltc.jarname" value="xsltc.jar"/>
    <property name="xsltc.jar" value="${xalan.dir}/${xsltc.jarname}"/>
    <property name="xml-apis.jarname" value="xml-apis.jar"/>
    <property name="xml-apis.jar" value="${xalan.dir}/${xml-apis.jarname}"/>
    <property name="soap.jarname" value="soap.jar"/>
    <property name="soap.jar" value="${modifiedthirdparty.dir}/Soap/2.2/java/build/lib/${soap.jarname}"/>
    <property name="mail.jarname" value="mailapi.jar"/>
    <property name="mail.jar" value="${thirdparty.dir}/sun/JavaMail/1.3/lib/${mail.jarname}"/>
    <property name="activation.jarname" value="activation.jar"/>
    <property name="activation.jar" value="${thirdparty.dir}/sun/jaf/1.0.2/${activation.jarname}"/>
    <property name="servlet.jarname" value="servlet.jar"/>
    <property name="servlet.dir" value="${apache.dir}/jakarta-tomcat/3.2.1/ServletAPI/lib"/>
    <property name="servlet.jar" value="${servlet.dir}/${servlet.jarname}"/>
    <property name="commons-httpclient.jarname" value="commons-httpclient-2.0-rc2.jar"/>
    <property name="commons-httpclient.dir" value="${apache.dir}/commons-httpclient/2.0-rc2"/>
    <property name="commons-httpclient.jar" value="${commons-httpclient.dir}/${commons-httpclient.jarname}"/>
    <property name="commons-logging.jarname" value="commons-logging.jar"/>
    <property name="commons-logging.dir" value="${apache.dir}/commons-logging/1.0.3"/>
    <property name="commons-logging.jar" value="${commons-logging.dir}/${commons-logging.jarname}"/>
    <property name="ibm.mq.jarname" value="com.ibm.mq.jar"/>
    <property name="ibm.mq.jar" value="${thirdparty.dir}/IBM/MQSeries/5.2.2/${ibm.mq.jarname}"/>
    <property name="ibm.mqbind.jar" value="${thirdparty.dir}/IBM/MQSeries/5.2.2/com.ibm.mqbind.jar"/>
    <property name="ibm.mqjms.jar" value="${thirdparty.dir}/IBM/MQSeries/5.2.2/com.ibm.mqjms.jar"/>
    <property name="ibm.mq.connector.jar" value="${thirdparty.dir}/IBM/MQSeries/5.2.2/connector.jar"/>
    <property name="ibm.mq.jta.jar" value="${thirdparty.dir}/IBM/MQSeries/5.2.2/jta.jar"/>
    <property name="microsoftsecurityclasses.zip" value="${thirdparty.dir}/Microsoft/security/5.00.2922.0/MicrosoftSecurityClasses.zip"/>
    <property name="commons-codec.jarname" value="commons-codec-1.1.1-dev.jar"/>
    <property name="commons-codec.jar" value="${apache.dir}/commons-codec/20030516/${commons-codec.jarname}"/>
    <property name="commons-collections.jarname" value="commons-collections-2_1.jar"/>
    <property name="commons-collections.jar" value="${apache.dir}/commons-collections/2.1/${commons-collections.jarname}"/>
    <property name="commons-cli.jarname" value="commons-cli-1_0.jar"/>
    <property name="commons-cli.jar" value="${apache.dir}/commons-cli/1.0/${commons-cli.jarname}"/>
    <property name="commons-lang.jarname" value="commons-lang-2.0.jar"/>
    <property name="commons-lang.jar" value="${apache.dir}/commons-lang/2.0/${commons-lang.jarname}"/>
    <property name="commons-pool.jarname" value="commons-pool.jar"/>
    <property name="commons-pool.jar" value="${apache.dir}/commons-pool/20030429/${commons-pool.jarname}"/>
    <property name="ctgclient.jarname" value="ctgclient.jar"/>
    <property name="ctgclient.dir" value="${thirdparty.dir}/IBM/CICS Transaction Gateway/5.0"/>
    <property name="ctgclient.jar" value="${ctgclient.dir}/${ctgclient.jarname}"/>
    <property name="jakarta-oro.jarname" value="jakarta-oro-2.0.7.jar"/>
    <property name="jakarta-oro.jar" value="${apache.dir}/jakarta-oro/2.0.7/${jakarta-oro.jarname}"/>
    <property name="log4j.jarname" value="log4j-1_2_7.jar"/>
    <property name="log4j.jar" value="${apache.dir}/jakarta-log4j/1.2.7/${log4j.jarname}"/>
    <property name="goXMLEngine.jar" value="${thirdparty.dir}/XMLGlobal/GoXMLTransform/3_0_0/lib/engine.jar"/>
    <property name="goXMLResource.zip" value="${thirdparty.dir}/XMLGlobal/GoXMLTransform/3_0_0/lib/resource.zip"/>
    <property name="goXMLconfig.dir" value="${thirdparty.dir}/XMLGlobal/GoXMLTransform/3_0_0/config"/>
    <!-- JDom beta 8 is not compatible with GoXMLTransform 3.0.0, use beta 7 from GoXMLTransform 3.0.0 -->
    <property name="jdom.jarname" value="jdom.jar"/>
    <property name="jdom.jar" value="${thirdparty.dir}/XMLGlobal/GoXMLTransform/3_0_0/lib/${jdom.jarname}"/>
    <property name="jaxb1.jarname" value="jaxb-api.jar"/>
    <property name="jaxb2.jarname" value="jaxb-impl.jar"/>
    <property name="jaxb3.jarname" value="jaxb-libs.jar"/>
    <property name="jaxb4.jarname" value="jax-qname.jar"/>
    <property name="jaxb5.jarname" value="namespace.jar"/>
    <property name="jaxb6.jarname" value="xsdlib.jar"/>
    <property name="jaxb7.jarname" value="relaxngDatatype.jar"/>
    <property name="jaxb.jarnames" value="${jaxb1.jarname} ${jaxb2.jarname} ${jaxb3.jarname} ${jaxb4.jarname} ${jaxb5.jarname} ${jaxb6.jarname} ${jaxb7.jarname} "/>
    <property name="jwsdp.dir" value="${thirdparty.dir}/sun/jwsdp/1.2"/>
    <property name="jaxb.dir" value="${jwsdp.dir}/jaxb/lib"/>
    <property name="jaxb.shared.dir" value="${jwsdp.dir}/jwsdp-shared/lib"/>
    <property name="jaxb1.jar" value="${jaxb.dir}/${jaxb1.jarname}"/>
    <property name="jaxb2.jar" value="${jaxb.dir}/${jaxb2.jarname}"/>
    <property name="jaxb3.jar" value="${jaxb.dir}/${jaxb3.jarname}"/>
    <property name="jaxb4.jar" value="${jaxb.shared.dir}/${jaxb4.jarname}"/>
    <property name="jaxb5.jar" value="${jaxb.shared.dir}/${jaxb5.jarname}"/>
    <property name="jaxb6.jar" value="${jaxb.shared.dir}/${jaxb6.jarname}"/>
    <property name="jaxb7.jar" value="${jaxb.shared.dir}/${jaxb7.jarname}"/>
    <property name="jms.jarname" value="jms-1_0_2_b.jar"/>
    <property name="jms.jar" value="${thirdparty.dir}/sun/jms/1.0.2b/${jms.jarname}"/>
    <property name="jce.jarname" value="jce1_2_2.jar"/>
    <property name="jce.jar" value="${thirdparty.dir}/sun/jce/1.2.2/lib/${jce.jarname}"/>
    <property name="jce_provider.jarname" value="sunjce_provider.jar"/>
    <property name="jce_provider.jar" value="${thirdparty.dir}/sun/jce/1.2.2/lib/${jce_provider.jarname}"/>
    <property name="jcert.jarname" value="jcert.jar"/>
    <property name="jnet.jarname" value="jnet.jar"/>
    <property name="jsse.jarname" value="jsse.jar"/>
    <property name="jsse.dir" value="${thirdparty.dir}/sun/jsse/1.0.3_02-gl/lib"/>
    <property name="jcert.jar" value="${jsse.dir}/${jcert.jarname}"/>
    <property name="jnet.jar" value="${jsse.dir}/${jnet.jarname}"/>
    <property name="jsse.jar" value="${jsse.dir}/${jsse.jarname}"/>
    <property name="jaas.jarname" value="jaas-1_0.jar"/>
    <property name="jaas.jar" value="${thirdparty.dir}/sun/jaas/1.0/lib/${jaas.jarname}"/>
    <property name="jta.jarname" value="jta-1_0_1B-classes.zip"/>
    <property name="jta.jar" value="${thirdparty.dir}/sun/jta/jta-1_0_1b/${jta.jarname}"/>
    <property name="concurrent.jarname" value="concurrent-1_3_2.jar"/>
    <property name="concurrent.jar" value="${thirdparty.dir}/oswego.edu/util.concurrent/1.3.2/${concurrent.jarname}"/>
    <property name="xmlsec.jar" value="${apache.dir}/xml-security/xml-security-1_0_4/build/xmlsec-1_0_4.jar"/>
    <property name="imsico.jarname" value="imsico-1_2_5.jar"/>
    <property name="imsico.jar" value="${thirdparty.dir}/IBM/IMSICO/1.2.5/${imsico.jarname}"/>
    <property name="imsico-connector.jarname" value="imsico-connector-1_2_5.jar"/>
    <property name="imsico-connector.jar" value="${thirdparty.dir}/IBM/IMSICO/1.2.5/${imsico-connector.jarname}"/>
    <property name="junit.jar" value="${thirdparty.dir}/junit/3.8.1/junit.jar"/>
    <property name="mtjunit.jar" value="${thirdparty.dir}/MTJUnit/1.0/MTJUnit-1.jar"/>
    <property name="retroguard.jar" value="${thirdparty.dir}/Retroguard/1.1.13/retroguard.jar"/>
    <property name="j2se.tools.jarname" value="tools.jar"/>
    <property name="j2se.tools.jar" value="${thirdparty.dir}/sun/j2se/1.3.1_08/lib/${j2se.tools.jarname}"/>
    <property name="obfuscate.script" value="${src.root.dir}/Build/obfuscate_hsc.rgs"/>
    <property name="obfuscate.log" value="${build.lib}/obfuscate_hsc.log"/>
    <property name="extension.dir.name" value="ext"/>
    <property name="compile.debug" value="on"/>
    <property name="compile.optimize" value="off"/>
    <!-- These two will normally be set outside this file in the build.properties file. -->
    <property name="version" value="2.3.X.WIP"/>
    <property name="build.id" value="0"/>
    <!-- Jar Manifest standard properties -->
    <property name="manifest.key.main-class" value="Main-Class"/>
    <property name="manifest.key.class-path" value="Class-Path"/>
    <!-- Jar Manifest Seagull properties -->
    <property name="manifest.key.product" value="${COMPANY.word}-Product"/>
    <property name="manifest.key.component" value="${COMPANY.word}-Component"/>
    <property name="manifest.key.version" value="${COMPANY.word}-Version"/>
    <property name="manifest.key.build" value="${COMPANY.word}-Build"/>
    <property name="manifest.key.build-ts" value="${COMPANY.word}-Build-Timestamp"/>
    <!-- Javadoc -->
    <property name="javadoc.j2se.link" value="http://java.sun.com/j2se/1.3/docs/api/"/>
    <!-- Checksum -->
    <property name="checksum.algorithm.md5" value="MD5"/>
    <property name="checksum.algorithm.sha" value="SHA"/>
    <!-- =================================================================== -->
    <!-- Source files and class paths -->
    <!-- =================================================================== -->
    <!-- AIS -->
    <patternset id="ais.files">
        <include name="com/seagullsw/appinterface/server/**"/>
        <include name="com/seagullsw/perftest/"/>
        <exclude name="com/seagullsw/appinterface/server/backend/cics/"/>
        <exclude name="com/seagullsw/appinterface/server/backend/cobol/"/>
        <exclude name="com/seagullsw/appinterface/server/backend/ims/"/>
        <exclude name="com/seagullsw/appinterface/server/backend/hostconnector/"/>
        <exclude name="com/seagullsw/appinterface/server/backend/hostconnector2/"/>
        <exclude name="com/seagullsw/appinterface/server/backend/hc5250/"/>
        <exclude name="com/seagullsw/appinterface/server/backend/hc3270/"/>
        <exclude name="com/seagullsw/appinterface/server/admin/"/>
        <exclude name="com/seagullsw/appinterface/server/InvocationUnitTests.*"/>
    </patternset>
    <property name="ais-core.jarname" value="ais-core.jar"/>
    <property name="ais-core.jar" value="${build.lib}/${ais-core.jarname}"/>
    <path id="jaxb.classpath">
        <pathelement location="${jaxb1.jar}"/>
        <pathelement location="${jaxb2.jar}"/>
        <pathelement location="${jaxb3.jar}"/>
        <pathelement location="${jaxb4.jar}"/>
        <pathelement location="${jaxb5.jar}"/>
        <pathelement location="${jaxb6.jar}"/>
        <pathelement location="${jaxb7.jar}"/>
    </path>
    <path id="jsse.classpath">
        <pathelement location="${jcert.jar}"/>
        <pathelement location="${jnet.jar}"/>
        <pathelement location="${jsse.jar}"/>
    </path>
    <path id="jce.classpath.rt">
        <pathelement location="${jce.jar}"/>
        <pathelement location="${jce_provider.jar}"/>
    </path>
    <path id="ais.classpath">
        <pathelement location="${ibm.mq.jar}"/>
        <pathelement location="${ibm.mqbind.jar}"/>
        <pathelement location="${ibm.mqjms.jar}"/>
        <pathelement location="${xerces.jar}"/>
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="${xalan.jar}"/>
        <pathelement location="${soap.jar}"/>
        <pathelement location="${mail.jar}"/>
        <pathelement location="${commons-codec.jar}"/>
        <pathelement location="${commons-collections.jar}"/>
        <pathelement location="${commons-httpclient.jar}"/>
        <pathelement location="${commons-lang.jar}"/>
        <pathelement location="${commons-pool.jar}"/>
        <pathelement location="${commons-cli.jar}"/>
        <path refid="jaxb.classpath"/>
        <pathelement location="${jms.jar}"/>
        <pathelement location="${concurrent.jar}"/>
        <pathelement location="${jce.jar}"/>
    </path>
    <path id="xml.classpath.compile">
        <pathelement location="${xml-apis.jar}"/>
    </path>
    <path id="xml.classpath.rt">
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="${xerces.jar}"/>
        <pathelement location="${xalan.jar}"/>
    </path>
    <path id="transforms.classpath">
        <pathelement location="${jakarta-oro.jar}"/>
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="${xerces.jar}"/>
        <pathelement location="${xalan.jar}"/>
        <pathelement location="${goXMLEngine.jar}"/>
        <path refid="jaxb.classpath"/>
        <pathelement location="${commons-lang.jar}"/>
    </path>
    <path id="ais.client.classpath">
        <pathelement location="${ibm.mq.jar}"/>
        <pathelement location="${ibm.mqbind.jar}"/>
        <pathelement location="${ibm.mqjms.jar}"/>
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="${commons-collections.jar}"/>
        <pathelement location="${commons-lang.jar}"/>
        <pathelement location="${commons-pool.jar}"/>
        <path refid="jaxb.classpath"/>
        <pathelement location="${jms.jar}"/>
    </path>
    <!-- AppInterface Communications -->
    <patternset id="appinterfacecomm.files">
        <include name="com/seagullsw/appinterface/comm/"/>
        <exclude name="com/seagullsw/appinterface/comm/servlet/*"/>
    </patternset>
    <!-- MTalk Communications -->
    <patternset id="mtalkcomm.files">
        <include name="com/seagullsw/net/client/mtalk/"/>
    </patternset>
    <!-- AppInterface Setting -->
    <patternset id="appinterfacesettings.files">
        <include name="com/seagullsw/appinterface/settings/*"/>
    </patternset>
    <path id="appinterfacesettings.classpath">
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="${commons-lang.jar}"/>
    </path>
    <!-- AppInterface Server Settings -->
    <patternset id="appinterfaceserversettings.files">
        <include name="com/seagullsw/appinterface/server/settings/"/>
    </patternset>
    <!-- AppInterface Client -->
    <patternset id="ais.client.files">
        <include name="com/seagullsw/appinterface/client/"/>
        <include name="com/seagullsw/toolbox/config/"/>
        <include name="com/seagullsw/toolbox/xml/"/>
        <include name="com/seagullsw/toolbox/log/"/>
    </patternset>
    <property name="ais.client.jarname" value="ais-client.jar"/>
    <property name="ais.client.jar" value="${build.lib}/${ais.client.jarname}"/>
    <!-- AppInterface Admin Client-->
    <patternset id="ais.adminclient.files">
        <include name="com/seagullsw/appinterface/server/admin/*"/>
    </patternset>
    <path id="ais.adminclient.classpath">
        <pathelement location="${commons-lang.jar}"/>
        <pathelement location="${commons-cli.jar}"/>
    </path>
    <property name="ais-adminclient.jarname" value="ais-admin-client.jar"/>
    <property name="ais-adminclient.jar" value="${build.lib}/${ais-adminclient.jarname}"/>
    <!-- AppInterface Models -->
    <patternset id="appinterfacemodels.files">
        <include name="com/seagullsw/appinterface/model/"/>
        <exclude name="com/seagullsw/appinterface/model/cics/"/>
        <exclude name="com/seagullsw/appinterface/model/cobol/"/>
        <exclude name="com/seagullsw/appinterface/model/ims/"/>
    </patternset>
    <!-- Java Extensions -->
    <patternset id="javaextensions.files">
        <include name="com/seagullsw/debug/*"/>
        <include name="com/seagullsw/javax/"/>
        <exclude name="com/seagullsw/javax/swing/"/>
    </patternset>
    <path id="javaextensions.classpath">
        <pathelement location="${commons-lang.jar}"/>
    </path>
    <!-- UIFacilities -->
    <patternset id="uifacilities.files">
        <include name="com/parcplace/pjava/Framer/"/>
        <include name="com/seagullsw/javax/swing/SwingUtilitiesX.*"/>
        <include name="com/seagullsw/javax/swing/JTextPaneX.*"/>
        <include name="com/seagullsw/javax/swing/border/"/>
        <include name="com/seagullsw/ui/"/>
        <include name="com/seagullsw/debug/ui/"/>
    </patternset>
    <path id="uifacilities.classpath">
        <pathelement location="${commons-lang.jar}"/>
    </path>
    <!-- XML Services -->
    <patternset id="xmlservices.files">
        <include name="com/seagullsw/io/xml/"/>
    </patternset>
    <path id="xmlservices.classpath">
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="${xerces.jar}"/>
    </path>
    <!-- Transforms -->
    <patternset id="transforms.files">
        <include name="com/seagullsw/appinterface/transforms/"/>
    </patternset>
    <!-- Seagull Toolbox -->
    <patternset id="seagulltoolbox.files">
        <include name="com/seagullsw/toolbox/"/>
    </patternset>
    <path id="seagulltoolbox.classpath">
        <path refid="xml.classpath.rt"/>
        <path refid="jaxb.classpath"/>
        <path refid="jsse.classpath"/>
        <pathelement location="${commons-httpclient.jar}"/>
        <pathelement location="${commons-lang.jar}"/>
        <pathelement location="${commons-cli.jar}"/>
    </path>
    <!-- Win32 Interface -->
    <patternset id="win32interface.files">
        <include name="com/seagullsw/appinterface/win32/"/>
    </patternset>
    <!-- Proxy Servlet -->
    <patternset id="proxyservlet.files">
        <include name="com/seagullsw/appinterface/comm/servlet/"/>
    </patternset>
    <property name="proxyservlet.jarname" value="ais-servlet-proxy.jar"/>
    <property name="proxyservlet.jar" value="${build.lib}/${proxyservlet.jarname}"/>
    <path id="proxyservlet.classpath">
        <pathelement location="${servlet.jar}"/>
        <pathelement location="${xerces.jar}"/>
    </path>
    <!-- Admin Console -->
    <patternset id="adminconsole.files">
        <include name="com/seagullsw/appinterface/server/admin/client/"/>
    </patternset>
    <property name="adminconsole.jarname" value="ais-admin.jar"/>
    <property name="adminconsole.jar" value="${build.lib}/${adminconsole.jarname}"/>
    <!-- Java Connector Generator -->
    <patternset id="javaconnectorgenerator.files">
        <include name="com/seagullsw/appinterface/tools/javaconnectorgenerator/"/>
    </patternset>
    <property name="javaconnectorgenerator.jarname" value="JavaConnectorGenerator.jar"/>
    <property name="javaconnectorgenerator.jar" value="${build.lib}/${javaconnectorgenerator.jarname}"/>
    <!-- Security Toolkit -->
    <patternset id="securitytoolkit.files">
        <include name="com/seagullsw/appinterface/tools/security/"/>
    </patternset>
    <property name="securitytoolkit.jarname" value="SecurityToolkit.jar"/>
    <property name="securitytoolkit.jar" value="${build.lib}/${securitytoolkit.jarname}"/>
    <!-- Tools Framework -->
    <patternset id="devtools.framework.files">
        <include name="com/seagullsw/appinterface/tools/framework/"/>
    </patternset>
    <path id="devtools.framework.classpath">
        <pathelement location="${commons-lang.jar}"/>
    </path>
    <!-- Dev Tools -->
    <patternset id="devtools.files">
        <include name="com/seagullsw/appinterface/tools/"/>
        <exclude name="com/seagullsw/appinterface/tools/security/"/>
    </patternset>
    <path id="devtools.classpath">
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="${soap.jar}"/>
        <pathelement location="${commons-lang.jar}"/>
        <pathelement location="${jce.jar}"/>
    </path>
    <property name="ais-tools.jarname" value="ais-tools.jar"/>
    <property name="ais-tools.jar" value="${build.lib}/${ais-tools.jarname}"/>
    <!-- JavaTools (e.g. invoking the Java compiler) -->
    <patternset id="javatools.files">
        <include name="com/seagullsw/javatools/"/>
    </patternset>
    <path id="javatools.classpath">
        <pathelement location="${j2se.tools.jar}"/>
        <pathelement location="${jce.jar}"/>
        <path refid="jaxb.classpath"/>
        <pathelement location="${commons-lang.jar}"/>
    </path>
    <!-- Backends -->
    <patternset id="hcbackend.files">
        <include name="com/seagullsw/appinterface/**/*hostconnector*/"/>
        <include name="com/seagullsw/appinterface/server/backend/hsc/**"/>
    </patternset>
    <patternset id="cobol.files">
        <include name="com/seagullsw/appinterface/server/backend/cobol/"/>
        <include name="com/seagullsw/appinterface/model/cobol/"/>
    </patternset>
    <path id="cobol.classpath">
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="${commons-lang.jar}"/>
        <pathelement location="${commons-httpclient.jar}"/>
    </path>
    <patternset id="cics.files">
        <include name="com/seagullsw/appinterface/server/backend/cics/"/>
        <include name="com/seagullsw/appinterface/model/cics/"/>
    </patternset>
    <patternset id="ims.backend.files">
        <include name="com/seagullsw/appinterface/server/backend/ims/"/>
        <include name="com/seagullsw/appinterface/model/ims/"/>
    </patternset>
    <path id="cics.backend.classpath">
        <pathelement location="${ctgclient.jar}"/>
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="${xerces.jar}"/>
        <path refid="jaxb.classpath"/>
        <pathelement location="${jce.jar}"/>
        <pathelement location="${commons-codec.jar}"/>
        <pathelement location="${commons-lang.jar}"/>
    </path>
    <path id="ims.backend.classpath">
        <pathelement location="${xml-apis.jar}"/>
        <pathelement location="${jaas.jar}"/>
        <pathelement location="${imsico.jar}"/>
        <pathelement location="${imsico-connector.jar}"/>
        <pathelement location="${jce.jar}"/>
        <pathelement location="${jta.jar}"/>
        <pathelement location="${commons-httpclient.jar}"/>
        <path refid="jaxb.classpath"/>
    </path>
    <property name="ais-5250.jarname" value="ais-5250.jar"/>
    <property name="ais-5250.jar" value="${build.lib}/${ais-5250.jarname}"/>
    <property name="ais-3270.jarname" value="ais-3270.jar"/>
    <property name="ais-3270.jar" value="${build.lib}/${ais-3270.jarname}"/>
    <property name="ais-cobol.jarname" value="ais-cobol.jar"/>
    <property name="ais-cobol.jar" value="${build.lib}/${ais-cobol.jarname}"/>
    <property name="ais-cics.jarname" value="ais-cics.jar"/>
    <property name="ais-cics.jar" value="${build.lib}/${ais-cics.jarname}"/>
    <property name="ais-ims.jarname" value="ais-ims.jar"/>
    <property name="ais-ims.jar" value="${build.lib}/${ais-ims.jarname}"/>
    <property name="hsc.jarname" value="gwhsc.jar"/>
    <property name="hsc.jar" value="${build.lib}/${hsc.jarname}"/>
    <property name="hscu.jarname" value="gwhscu.jar"/>
    <property name="hscu.jar" value="${build.lib}/${hscu.jarname}"/>
    <!-- HSC -->
    <patternset id="hsc.files">
        <include name="com/seagullsw/gateway/"/>
        <include name="com/seagullsw/net/"/>
        <include name="com/seagullsw/security/"/>
        <include name="com/seagullsw/system/"/>
        <exclude name="com/seagullsw/net/client/mtalk/"/>
    </patternset>
    <!-- All the XSLT files -->
    <fileset id="xslt.files" dir="${xslt.resource.dir}">
        <include name="*.xsl"/>
    </fileset>
    <!-- All the AppInterface "base" classes -->
    <fileset id="appinterface.base.files" dir="${build.classes}">
        <patternset refid="appinterfacecomm.files"/>
        <patternset refid="appinterfacemodels.files"/>
        <patternset refid="javaextensions.files"/>
        <patternset refid="xmlservices.files"/>
        <patternset refid="mtalkcomm.files"/>
    </fileset>
    <!-- All the AppInterface "base" classes -->
    <fileset id="appinterface.baseplus.files" dir="${build.classes}">
        <!-- What I really want to do here is refer to the .base.files
                        fileset, but ant doesn't allow nested filesets. Sigh.
                        <fileset refid="appinterface.base.files"/> -->
        <patternset refid="appinterfacecomm.files"/>
        <patternset refid="appinterfacemodels.files"/>
        <patternset refid="javaextensions.files"/>
        <patternset refid="xmlservices.files"/>
        <patternset refid="appinterfacesettings.files"/>
        <patternset refid="uifacilities.files"/>
        <patternset refid="seagulltoolbox.files"/>
        <patternset refid="mtalkcomm.files"/>
        <patternset refid="transforms.files"/>
    </fileset>
    <!-- =================================================================== -->
    <!-- Set file copy filters -->
    <!-- =================================================================== -->
    <property name="text.copyright.1" value="(c) 1993 - 2003 Seagull Business Software Ireland Ltd."/>
    <property name="text.copyright.2" value="All Rights Reserved."/>
    <target name="init.filters">
        <filter token="PRODUCT" value="${product.name}"/>
        <filter token="VERSION" value="${version}"/>
        <filter token="BUILDID" value="${build.id}"/>
        <filter token="BUILDTIMESTAMP" value="${BuildTimeStamp}"/>
        <filter token="COPYRIGHT-1" value="${text.copyright.1}"/>
        <filter token="COPYRIGHT-2" value="${text.copyright.2}"/>
    </target>
    <!-- =================================================================== -->
    <!-- Compiles -->
    <!-- =================================================================== -->
    <target name="compile" depends="compile.ais, compile.ais.client, compile.ais.adminclient, compile.devtools, compile.proxyservlet, compile.adminconsole, compile.javaconnectorgenerator, compile.securitytoolkit, compile.hcbackend, compile.cobol, compile.cics, compile.IMSbackend" description="Compiles all the sources into ${build.classes}"/>
    <!-- doACompile - a compile "subroutine" -->
    <target name="doACompile">
        <javac srcdir="${src.dir}" destdir="${build.classes}" debug="${compile.debug}" optimize="${compile.optimize}" failonerror="true" includeAntRuntime="false">
            <patternset refid="${doACompile.files}"/>
        </javac>
    </target>
    <!-- doACompileWithClasspath - a compile "subroutine" -->
    <target name="doACompileWithClasspath">
        <javac srcdir="${src.dir}" destdir="${build.classes}" debug="${compile.debug}" optimize="${compile.optimize}" failonerror="true" includeAntRuntime="false">
            <patternset refid="${doACompile.files}"/>
            <classpath refid="${doACompile.classpath}"/>
        </javac>
    </target>
    <!-- AIS -->
    <target name="compile.ais" depends="compile.toolbox, compile.xmlservices, compile.transforms, compile.uifacilities, compile.appinterfacesettings, compile.appinterfacemodels, compile.appinterfacecomm, compile.hsc, compile.mtalkcomm">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="ais.files"/>
            <param name="doACompile.classpath" value="ais.classpath"/>
        </antcall>
    </target>
    <!-- AppInterface Models -->
    <target name="compile.appinterfacemodels" depends="prepare, compile.xmlservices">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="appinterfacemodels.files"/>
            <param name="doACompile.classpath" value="ais.classpath"/>
        </antcall>
    </target>
    <!-- AppInterface Communications -->
    <target name="compile.appinterfacecomm" depends="prepare">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="appinterfacecomm.files"/>
            <param name="doACompile.classpath" value="ais.classpath"/>
        </antcall>
    </target>
    <!-- MTalk Communication -->
    <target name="compile.mtalkcomm" depends="prepare">
        <antcall target="doACompile">
            <param name="doACompile.files" value="mtalkcomm.files"/>
        </antcall>
    </target>
    <!-- AppInterface Setting -->
    <target name="compile.appinterfacesettings" depends="prepare">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="appinterfacesettings.files"/>
            <param name="doACompile.classpath" value="appinterfacesettings.classpath"/>
        </antcall>
    </target>
    <!-- UI Facilities -->
    <target name="compile.uifacilities" depends="prepare">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="uifacilities.files"/>
            <param name="doACompile.classpath" value="uifacilities.classpath"/>
        </antcall>
    </target>
    <!-- Java Extensions -->
    <target name="compile.javaextensions" depends="prepare">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="javaextensions.files"/>
            <param name="doACompile.classpath" value="javaextensions.classpath"/>
        </antcall>
    </target>
    <!-- XML Services -->
    <target name="compile.xmlservices" depends="compile.javaextensions">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="xmlservices.files"/>
            <param name="doACompile.classpath" value="xmlservices.classpath"/>
        </antcall>
    </target>
    <!-- Transforms -->
    <target name="compile.transforms" depends="compile.javaextensions">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="transforms.files"/>
            <param name="doACompile.classpath" value="transforms.classpath"/>
        </antcall>
    </target>
    <!-- Seagull Toolbox -->
    <target name="compile.toolbox" depends="compile.javaextensions">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="seagulltoolbox.files"/>
            <param name="doACompile.classpath" value="seagulltoolbox.classpath"/>
        </antcall>
    </target>
    <!-- Win32 Interface -->
    <target name="compile.win32interface" depends="prepare">
        <antcall target="doACompile">
            <param name="doACompile.files" value="win32interface.files"/>
        </antcall>
    </target>
    <!-- AppInterface Client -->
    <target name="compile.ais.client" depends="prepare, compile.xmlservices, compile.appinterfacecomm, compile.appinterfacemodels">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="ais.client.files"/>
            <param name="doACompile.classpath" value="ais.client.classpath"/>
        </antcall>
    </target>
    <!-- AppInterface Admin Client -->
    <target name="compile.ais.adminclient" depends="prepare, compile.xmlservices, compile.appinterfacecomm, compile.appinterfacemodels, compile.ais.client">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="ais.adminclient.files"/>
            <param name="doACompile.classpath" value="ais.classpath"/>
        </antcall>
    </target>
    <!-- Proxy Servlet -->
    <target name="compile.proxyservlet" depends="prepare">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="proxyservlet.files"/>
            <param name="doACompile.classpath" value="proxyservlet.classpath"/>
        </antcall>
    </target>
    <!-- Admin Console -->
    <target name="compile.adminconsole" depends="prepare, compile.devtools.framework">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="adminconsole.files"/>
            <param name="doACompile.classpath" value="ais.adminclient.classpath"/>
        </antcall>
    </target>
    <!-- Java Connector Generator -->
    <target name="compile.javaconnectorgenerator" depends="prepare, compile.devtools.framework, compile.appinterfacemodels, compile.javatools">
        <antcall target="doACompile">
            <param name="doACompile.files" value="javaconnectorgenerator.files"/>
        </antcall>
    </target>
    <!-- Security Toolkit -->
    <target name="compile.securitytoolkit" depends="prepare, compile.devtools.framework, compile.appinterfacemodels, compile.javatools">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="securitytoolkit.files"/>
            <param name="doACompile.classpath" value="devtools.classpath"/>
        </antcall>
    </target>
    <!-- Tools Framework -->
    <target name="compile.devtools.framework" depends="prepare, compile.toolbox, compile.xmlservices, compile.uifacilities, compile.appinterfacesettings">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="devtools.framework.files"/>
            <param name="doACompile.classpath" value="devtools.framework.classpath"/>
        </antcall>
    </target>
    <!-- DevTools -->
    <target name="compile.devtools" depends="prepare, compile.devtools.framework, compile.ais.client, compile.appinterfacemodels, compile.javatools">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="devtools.files"/>
            <param name="doACompile.classpath" value="devtools.classpath"/>
        </antcall>
    </target>
    <!-- JavaTools (e.g. invoking the Java compiler) -->
    <target name="compile.javatools" depends="prepare">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="javatools.files"/>
            <param name="doACompile.classpath" value="javatools.classpath"/>
        </antcall>
    </target>
    <!-- Backends -->
    <target name="compile.hcbackend" depends="prepare, compile.ais">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="hcbackend.files"/>
            <param name="doACompile.classpath" value="ais.classpath"/>
        </antcall>
    </target>
    <target name="compile.cobol" depends="prepare, compile.ais">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="cobol.files"/>
            <param name="doACompile.classpath" value="cobol.classpath"/>
        </antcall>
    </target>
    <target name="compile.cics" depends="prepare, compile.ais">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="cics.files"/>
            <param name="doACompile.classpath" value="cics.backend.classpath"/>
        </antcall>
    </target>
    <target name="compile.IMSbackend" depends="prepare, compile.ais">
        <antcall target="doACompileWithClasspath">
            <param name="doACompile.files" value="ims.backend.files"/>
            <param name="doACompile.classpath" value="ims.backend.classpath"/>
        </antcall>
    </target>
    <!-- HSC -->
    <target name="compile.hsc" depends="prepare">
        <javac srcdir="${src.sourcesafemirror.dir}" classpath="${microsoftsecurityclasses.zip}" destdir="${build.classes}" debug="${compile.debug}" includeAntRuntime="false">
            <include name="com/seagullsw/"/>
        </javac>
    </target>
    <!-- JavaDoc doclet -->
    <target name="compile.doclet">
        <javac srcdir="${src.dir}" destdir="${build.classes}" debug="${compile.debug}" includeAntRuntime="true">
            <include name="com/seagullsw/internaldev/tools/apidoclet//"/>
        </javac>
    </target>
    <!-- =================================================================== -->
    <!-- Create jar files -->
    <!-- =================================================================== -->
    <target name="compute-checksum">
        <checksum file="${file}" algorithm="${checksum.algorithm.md5}" property="cs_value"/>
        <echo level="info" message="${checksum.algorithm.md5} -> ${cs_value}"/>
        <mkdir dir="${build.checksum}"/>
        <!-- Create a text file with the checksum value. -->
        <concat destfile="${build.checksum}/${filename}.${checksum.algorithm.md5}.txt">${cs_value}</concat>
        <!-- Create an XML file with the checksum value. -->
        <concat destfile="${build.checksum}/${filename}.${checksum.algorithm.md5}.xml">&lt;?xml version="1.0"?>
&lt;!-- Build auto-generated -->
&lt;checksum file="${filename}" algorithm="${checksum.algorithm.md5}">${cs_value}&lt;/checksum></concat>
        <xmlvalidate file="${build.checksum}/${filename}.${checksum.algorithm.md5}.xml" lenient="true"/>
    </target>
    <!-- Create all-jars.xml -->
    <target name="create-all-jars.xml">
        <!-- Create an XML file with the jar file names created. -->
        <concat destfile="${all-jars.xml}">&lt;?xml version="1.0"?>
&lt;!-- Build auto-generated -->
&lt;jars>
    &lt;jar>${ais-core.jarname}&lt;/jar>
    &lt;jar>${ais.client.jarname}&lt;/jar>
    &lt;jar>${ais-adminclient.jarname}&lt;/jar>
    &lt;jar>${proxyservlet.jarname}&lt;/jar>
    &lt;jar>${adminconsole.jarname}&lt;/jar>
    &lt;jar>${javaconnectorgenerator.jarname}&lt;/jar>
    &lt;jar>${securitytoolkit.jarname}&lt;/jar>
    &lt;jar>${ais-tools.jarname}&lt;/jar>
    &lt;jar>${ais-5250.jarname}&lt;/jar>
    &lt;jar>${ais-3270.jarname}&lt;/jar>
    &lt;jar>${ais-cobol.jarname}&lt;/jar>
    &lt;jar>${ais-cics.jarname}&lt;/jar>
    &lt;jar>${ais-ims.jarname}&lt;/jar>
    &lt;jar>${hsc.jarname}&lt;/jar>
    &lt;jar>${hscu.jarname}&lt;/jar>
&lt;/jars>
        </concat>
        <echo level="info" message="Created ${all-jars.xml}"/>
        <xmlvalidate file="${all-jars.xml}" lenient="true"/>
    </target>
    <!-- Copy checksum files to report dir -->
    <target name="copy-checksums">
        <antcall target="create-all-jars.xml"/>
        <copy todir="${reports.checksum}">
            <fileset dir="${build.checksum}"/>
        </copy>
    </target>
    <target name="jars" depends="jar.ais-core, jar.ais.client, jar.ais.adminclient, jar.proxyservlet, jar.adminconsole, jar.javaconnectorgenerator, jar.securitytoolkit, jar.ais-tools, jar.ais-5250, jar.ais-3270, jar.ais-cobol, jar.ais-cics, jar.ais-ims, jar.hsc" description="Creates the jar files in ${build.lib}">
        <antcall target="copy-checksums"/>
    </target>
    <target name="jar.ais-core" depends="init, compile.ais, createSplash.ais.splashscreens">
        <mkdir dir="${build.lib}"/>
        <jar jarfile="${ais-core.jar}" basedir="${build.classes}">
            <patternset refid="ais.files"/>
            <fileset refid="appinterface.baseplus.files"/>
            <patternset>
                <include name="com/seagullsw/javax/swing/"/>
                <!-- Not sure why this isn't getting included as part of uifacilities.files via appinterface.baseplus.files. -->
            </patternset>
            <fileset refid="xslt.files"/>
            <fileset dir="${java.resource.dir}">
                <include name="com/seagullsw/appinterface/server/**"/>
                <include name="com/seagullsw/appinterface/comm/**"/>
                <exclude name="com/seagullsw/appinterface/server/admin/**"/>
            </fileset>
            <fileset dir="${src.dir}">
                <include name="com/seagullsw/**/jaxb.properties"/>
                <include name="com/seagullsw/**/bgm.ser"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.main-class}" value="com.seagullsw.appinterface.server.AppInterfaceServer"/>
                <attribute name="${manifest.key.class-path}" value="${ais-5250.jarname} ${ais-3270.jarname} ${ais-cobol.jarname} ${ais-cics.jarname} ${ais-ims.jarname} ${xalan.jarname} ${soap.jarname} ${activation.jarname} ${mail.jarname} ${commons-collections.jarname} ${commons-pool.jarname} ${xerces.jarname} ${xml-apis.jarname} ${commons-lang.jarname} ${commons-cli.jarname} ${jaxb.jarnames} ${jakarta-oro.jarname} ${concurrent.jarname} ${commons-httpclient.jarname} ${jms.jarname} ${extension.dir.name}/engine.jar ${extension.dir.name}/resource.zip ${extension.dir.name}/jdom.jar  ../${fdef.dirname}/ ../JavaConnectors/Classes/"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="AIS Core"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${ais-core.jar}"/>
            <param name="filename" value="${ais-core.jarname}"/>
        </antcall>
    </target>
    <target name="jar.ais.client" depends="init, compile.ais.client">
        <mkdir dir="${build.lib}"/>
        <jar jarfile="${ais.client.jar}" basedir="${build.classes}">
            <patternset refid="ais.client.files"/>
            <fileset refid="appinterface.base.files"/>
            <fileset dir="${src.dir}">
                <include name="com/seagullsw/toolbox/config/**/jaxb.properties"/>
                <include name="com/seagullsw/toolbox/config/**/bgm.ser"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.class-path}" value="${xerces.jarname} ${xml-apis.jarname} ${commons-lang.jarname} ${jaxb.jarnames} ${ibm.mq.jarname} ${jms.jarname} ${mail.jarname} ${soap.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="Java Client"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${ais.client.jar}"/>
            <param name="filename" value="${ais.client.jarname}"/>
        </antcall>
    </target>
    <target name="jar.ais.adminclient" depends="init, compile.ais.adminclient">
        <mkdir dir="${build.lib}"/>
        <jar jarfile="${ais-adminclient.jar}" basedir="${build.classes}">
            <patternset refid="ais.adminclient.files"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.class-path}" value="${ais.client.jarname} ${xerces.jarname} ${xml-apis.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="Java Admin Client"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${ais-adminclient.jar}"/>
            <param name="filename" value="${ais-adminclient.jarname}"/>
        </antcall>
    </target>
    <target name="jar.proxyservlet" depends="init, compile.proxyservlet">
        <mkdir dir="${build.lib}"/>
        <jar jarfile="${proxyservlet.jar}" basedir="${build.classes}">
            <patternset refid="proxyservlet.files"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.class-path}" value="${ais.client.jarname} ${servlet.jarname} ${xerces.jarname} ${xml-apis.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="Servlet Proxy"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${proxyservlet.jar}"/>
            <param name="filename" value="${proxyservlet.jarname}"/>
        </antcall>
    </target>
    <target name="jar.adminconsole" depends="init, compile.adminconsole, createSplash.ais.splashscreens">
        <mkdir dir="${build.lib}"/>
        <!-- Copy "resource" files that go in the jar file. -->
        <copy toDir="${build.classes}" preservelastmodified="true">
            <fileset dir="${java.resource.dir}">
                <include name="com/seagullsw/appinterface/server/admin/client/"/>
                <include name="com/seagullsw/appinterface/server/*.jpg"/>
            </fileset>
        </copy>
        <jar jarfile="${adminconsole.jar}" basedir="${build.classes}">
            <patternset refid="adminconsole.files"/>
            <patternset refid="devtools.framework.files"/>
            <patternset refid="ais.client.files"/>
            <patternset refid="appinterfaceserversettings.files"/>
            <fileset refid="appinterface.baseplus.files"/>
            <include name="com/seagullsw/appinterface/server/*.jpg"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.main-class}" value="com.seagullsw.appinterface.server.admin.client.AppInterfaceServerAdminUIClient"/>
                <attribute name="${manifest.key.class-path}" value="${ais-core.jarname} ${xerces.jarname} ${xml-apis.jarname} ${xalan.jarname} ${soap.jarname} ${activation.jarname} ${mail.jarname} ${commons-cli.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="Administrative Console"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${adminconsole.jar}"/>
            <param name="filename" value="${adminconsole.jarname}"/>
        </antcall>
    </target>
    <target name="jar.javaconnectorgenerator" depends="init, compile.javaconnectorgenerator">
        <mkdir dir="${build.lib}"/>
        <!-- Copy "resource" files that go in the jar file. -->
        <copy toDir="${build.classes}" preservelastmodified="true" filtering="true">
            <fileset dir="${java.resource.dir}">
                <include name="com/seagullsw/appinterface/tools/javaconnectorgenerator/"/>
            </fileset>
        </copy>
        <jar jarfile="${javaconnectorgenerator.jar}" basedir="${build.classes}">
            <patternset refid="javaconnectorgenerator.files"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.main-class}" value="com.seagullsw.appinterface.tools.javaconnectorgenerator.JavaConnectorGenerator"/>
                <attribute name="${manifest.key.class-path}" value="${ais-tools.jarname} ${xml-apis.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="Java Connector Generator"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${javaconnectorgenerator.jar}"/>
            <param name="filename" value="${javaconnectorgenerator.jarname}"/>
        </antcall>
    </target>
    <target name="jar.securitytoolkit" depends="init, compile.securitytoolkit">
        <mkdir dir="${build.lib}"/>
        <!-- Copy "resource" files that go in the jar file. -->
        <copy toDir="${build.classes}" preservelastmodified="true" filtering="true">
            <fileset dir="${java.resource.dir}">
                <include name="com/seagullsw/appinterface/tools/security/"/>
            </fileset>
        </copy>
        <jar jarfile="${securitytoolkit.jar}" basedir="${build.classes}">
            <patternset refid="securitytoolkit.files"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.main-class}" value="com.seagullsw.appinterface.tools.security.SecurityToolkit"/>
                <attribute name="${manifest.key.class-path}" value="${ais-core.jarname} ${ais-tools.jarname} ${xml-apis.jarname} ${commons-lang.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="Security Toolkit"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${securitytoolkit.jar}"/>
            <param name="filename" value="${securitytoolkit.jarname}"/>
        </antcall>
    </target>
    <target name="jar.ais-tools" depends="init, compile.devtools, createSplash.tools.splashscreens, compile.win32interface, compile.javatools">
        <mkdir dir="${build.lib}"/>
        <!-- Copy "resource" files that go in the jar file. -->
        <copy toDir="${build.classes}" preservelastmodified="true">
            <fileset dir="${java.resource.dir}">
                <include name="com/seagullsw/appinterface/**/*.gif"/>
            </fileset>
        </copy>
        <jar jarfile="${ais-tools.jar}" basedir="${build.classes}">
            <patternset refid="devtools.files"/>
            <patternset refid="adminconsole.files"/>
            <fileset refid="appinterface.baseplus.files"/>
            <patternset>
                <include name="com/seagullsw/appinterface/**/*settings*/"/>
                <include name="com/seagullsw/javax/swing/"/>
                <!-- Not sure why this isn't getting included as part of uifacilities.files via appinterface.baseplus.files. -->
            </patternset>
            <include name="com/seagullsw/appinterface/tools/images/*.jpg"/>
            <include name="com/seagullsw/appinterface/**/*.gif"/>
            <patternset refid="javatools.files"/>
            <patternset refid="win32interface.files"/>
            <patternset refid="ais.client.files"/>
            <fileset refid="xslt.files"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.main-class}" value="com.seagullsw.appinterface.tools.serverdef.DefinitionTool"/>
                <attribute name="${manifest.key.class-path}" value="${ais-cobol.jarname} ${ais-cics.jarname} ${ais-ims.jarname} ${xerces.jarname} ${xml-apis.jarname} ${xalan.jarname} ${soap.jarname} ${activation.jarname} ${mail.jarname} ${jaxb.jarnames} ${commons-lang.jarname} ${extension.dir.name}/${j2se.tools.jarname} ${ais-tools.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="Tools"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${ais-tools.jar}"/>
            <param name="filename" value="${ais-tools.jarname}"/>
        </antcall>
    </target>
    <target name="jar.ais-5250" depends="init, compile.hcbackend">
        <mkdir dir="${build.lib}"/>
        <jar jarfile="${ais-5250.jar}" basedir="${build.classes}">
            <patternset refid="hcbackend.files"/>
            <exclude name="com/seagullsw/appinterface/tools/"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.class-path}" value="${ais-core.jarname} ${hsc.jarname} ${hscu.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="5250 Connector"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${ais-5250.jar}"/>
            <param name="filename" value="${ais-5250.jarname}"/>
        </antcall>
    </target>
    <target name="jar.ais-3270" depends="init, compile.hcbackend">
        <mkdir dir="${build.lib}"/>
        <jar jarfile="${ais-3270.jar}" basedir="${build.classes}">
            <patternset refid="hcbackend.files"/>
            <exclude name="com/seagullsw/appinterface/tools/"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.class-path}" value="${ais-core.jarname} ${hsc.jarname} ${hscu.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="3270 Connector"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${ais-3270.jar}"/>
            <param name="filename" value="${ais-3270.jarname}"/>
        </antcall>
    </target>
    <target name="jar.ais-cobol" depends="init, compile.cobol">
        <mkdir dir="${build.lib}"/>
        <jar jarfile="${ais-cobol.jar}" basedir="${build.classes}">
            <patternset refid="cobol.files"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.class-path}" value="${ais-core.jarname} ${ais-cics.jarname} ${ais-ims.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="Cobol Connector"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${ais-cobol.jar}"/>
            <param name="filename" value="${ais-cobol.jarname}"/>
        </antcall>
    </target>
    <target name="jar.ais-cics" depends="init, compile.cics">
        <mkdir dir="${build.lib}"/>
        <copy toDir="${build.classes}" preservelastmodified="true">
            <fileset dir="${src.dir}">
                <include name="com/seagullsw/**/jaxb.properties"/>
                <include name="com/seagullsw/**/bgm.ser"/>
            </fileset>
        </copy>
        <jar jarfile="${ais-cics.jar}" basedir="${build.classes}">
            <patternset refid="cics.files"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.class-path}" value="${ais-core.jarname} ${ais-cobol.jarname} ${extension.dir.name}/${ctgclient.jarname} ${commons-codec.jarname} ${commons-logging.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="CICS Connector"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${ais-cics.jar}"/>
            <param name="filename" value="${ais-cics.jarname}"/>
        </antcall>
    </target>
    <target name="jar.ais-ims" depends="init, compile.IMSbackend">
        <mkdir dir="${build.lib}"/>
        <jar jarfile="${ais-ims.jar}" basedir="${build.classes}">
            <patternset refid="ims.backend.files"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.class-path}" value="${ais-core.jarname} ${ais-cobol.jarname} ${imsico.jarname} ${imsico-connector.jarname} ${jaas.jarname} ${jta.jarname}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="IMS Connector"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${ais-ims.jar}"/>
            <param name="filename" value="${ais-ims.jarname}"/>
        </antcall>
    </target>
    <target name="jar.hsc" depends="init, compile.hsc">
        <mkdir dir="${build.lib}"/>
        <jar jarfile="${hscu.jar}" basedir="${build.classes}">
            <patternset refid="hsc.files"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="${manifest.key.product}" value="${product.name}"/>
                <attribute name="${manifest.key.component}" value="Host Session Connector"/>
                <attribute name="${manifest.key.version}" value="${version}"/>
                <attribute name="${manifest.key.build}" value="${build.id}"/>
                <attribute name="${manifest.key.build-ts}" value="${BuildTimeStamp}"/>
            </manifest>
        </jar>
        <antcall target="compute-checksum">
            <param name="file" value="${hscu.jar}"/>
            <param name="filename" value="${hscu.jarname}"/>
        </antcall>
        <echo level="info" message="Running RetroGuard..."/>
        <java classname="RetroGuard" fork="yes">
            <arg value="${hscu.jar}"/>
            <arg value="${hsc.jar}"/>
            <arg value="${obfuscate.script}"/>
            <arg value="${obfuscate.log}"/>
            <classpath>
                <pathelement path="${retroguard.jar}"/>
            </classpath>
        </java>
        <antcall target="compute-checksum">
            <param name="file" value="${hsc.jar}"/>
            <param name="filename" value="${hsc.jarname}"/>
        </antcall>
    </target>
    <target name="jar.testbackend" depends="test.compile">
        <jar jarfile="${build.lib}/ais-testbackend.jar" basedir="${test.bin}">
            <include name="com/seagullsw/appinterface/server/backend/aistest/**"/>
            <fileset dir="${src.test.dir}">
                <include name="com/seagullsw/appinterface/server/backend/aistest/**/jaxb.properties"/>
                <include name="com/seagullsw/appinterface/server/backend/aistest/**/bgm.ser"/>
            </fileset>
        </jar>
    </target>
    <!-- =================================================================== -->
    <!-- Prepares the build directory -->
    <!-- =================================================================== -->
    <target name="prepare" depends="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes}"/>
    </target>
    <!-- =================================================================== -->
    <!-- Cleans -->
    <!-- =================================================================== -->
    <target name="clean" description="Removes all the generated files and directories">
        <delete dir="${build.dir}"/>
    </target>
    <target name="clean.jars">
        <delete dir="${build.lib}"/>
    </target>
    <target name="clean.classes" description="Removes all .class files">
        <delete dir="${build.classes}"/>
    </target>
    <!-- =================================================================== -->
    <!-- Init -->
    <!-- =================================================================== -->
    <target name="init" depends="banner">
        <tstamp>
            <!-- The date/time patterns are as defined in the Java SimpleDateFormat class. -->
            <format property="BuildTimeStamp" pattern="yyyy-MMMMM-dd HH:mm z"/>
        </tstamp>
        <filter token="PRODUCT" value="${product.name}"/>
        <filter token="VERSION" value="${version}"/>
        <filter token="BUILDID" value="${build.id}"/>
        <filter token="BUILDTIMESTAMP" value="${BuildTimeStamp}"/>
        <filter token="COPYRIGHT-1" value="${text.copyright.1}"/>
        <filter token="COPYRIGHT-2" value="${text.copyright.2}"/>
    </target>
    <target name="banner" unless="banner-set">
        <property name="logxsl-prop-sep" value="->"/>
        <echo level="info" message="ant.file ${logxsl-prop-sep} ${ant.file}"/>
        <echo level="info" message="ant.version ${logxsl-prop-sep} ${ant.version}"/>
        <echo level="info" message="java.vm.version ${logxsl-prop-sep} ${ant.java.version}"/>
        <echo level="info" message="java.version ${logxsl-prop-sep} ${java.version}"/>
        <echo level="info" message="os.name ${logxsl-prop-sep} ${os.name}"/>
        <echo level="info" message="Build ID: ${build.id}"/>
        <property name="banner-set" value="true"/>
    </target>
    <!-- =================================================================== -->
    <!-- Splash Screens -->
    <!-- =================================================================== -->
    <property name="internaldev.classes" value="${build.dir}/internaldev"/>
    <property name="splash.src" value="${src.root.dir}/Build/splashscreen"/>
    <property name="splash.dest" value="${build.dir}/splashscreens"/>
    <property name="server.splashscreen.line-1" value="Application Interface Server"/>
    <property name="tools.splashscreen.line-1" value="Transidiom Developer"/>
    <!-- Task compile.splashScreenCreator -->
    <target name="compile.splashScreenCreator">
        <mkdir dir="${internaldev.classes}"/>
        <javac srcdir="${src.test.dir}" destdir="${internaldev.classes}" debug="${compile.debug}">
            <include name="com/seagullsw/internaldev/build/SplashscreenCreator.java"/>
        </javac>
    </target>
    <!--
             Run SplashscreenCreator program which takes a "vanilla" jpg plus
             some text and creates a new "merged" jpg.
             This is used by the createSplash.xxx.splashscreen targets.
        -->
    <target name="createSplash" depends="compile.splashScreenCreator">
        <!--  java task: failonerror works only if fork is true -->
        <java classname="com.seagullsw.internaldev.build.SplashscreenCreator" failonerror="true" fork="true">
            <!-- <sysproperty key="com.seagullsw.debug" value="true"/>  -->
            <sysproperty key="com.seagullsw.quiet" value="false"/>
            <sysproperty key="com.seagullsw.x" value="8"/>
            <sysproperty key="com.seagullsw.y" value="196"/>
            <sysproperty key="com.seagullsw.fontsize" value="11"/>
            <sysproperty key="com.seagullsw.sourceScreenFile" value="${createSplash.sourceScreenFile}"/>
            <sysproperty key="com.seagullsw.targetScreenFile" value="${createSplash.targetScreenFile}"/>
            <sysproperty key="com.seagullsw.screenTextFile" value="${createSplash.screenTextFile}"/>
            <classpath>
                <pathelement location="${internaldev.classes}"/>
            </classpath>
        </java>
    </target>
    <!-- Create AIS splashscreens -->
    <target name="createSplash.ais.splashscreens" depends="init">
        <filter token="SERVER.SPLASHSCREEN.LINE-1" value="${server.splashscreen.line-1}"/>
        <!-- Line 2 is in the template and uses the Version, Build and Build date tokens. -->
        <filter token="SERVER.SPLASHSCREEN.LINE-3" value="${text.copyright.1}"/>
        <filter token="SERVER.SPLASHSCREEN.LINE-4" value="${text.copyright.2}"/>
        <mkdir dir="${splash.dest}"/>
        <copy file="${splash.src}/splashscreen-template-server.txt" tofile="${splash.dest}/splashscreen-server.txt" overwrite="true" filtering="true"/>
        <antcall target="createSplash">
            <param name="createSplash.sourceScreenFile" value="${splash.src}/BasicSplashScreen.jpg"/>
            <param name="createSplash.screenTextFile" value="${splash.dest}/splashscreen-server.txt"/>
            <param name="createSplash.targetScreenFile" value="${splash.dest}/ServerSplashScreen.jpg"/>
        </antcall>
        <!-- Copy the splash to the AIS and SAC class path -->
        <copy file="${splash.dest}/ServerSplashScreen.jpg" tofile="${build.classes}/com/seagullsw/appinterface/server/ServerSessionSplashScreen.jpg" overwrite="yes"/>
    </target>
    <!-- Create Tools splashscreens -->
    <target name="createSplash.tools.splashscreens" depends="init">
        <filter token="TOOLS.SPLASHSCREEN.LINE-1" value="${tools.splashscreen.line-1}"/>
        <!-- Line 2 is in the template and uses the Version, Build and Build date tokens. -->
        <filter token="TOOLS.SPLASHSCREEN.LINE-3" value="${text.copyright.1}"/>
        <filter token="TOOLS.SPLASHSCREEN.LINE-4" value="${text.copyright.2}"/>
        <mkdir dir="${splash.dest}"/>
        <copy file="${splash.src}/splashscreen-template-developer.txt" tofile="${splash.dest}/splashscreen-developer.txt" overwrite="true" filtering="true"/>
        <antcall target="createSplash">
            <param name="createSplash.sourceScreenFile" value="${splash.src}/BasicSplashScreen.jpg"/>
            <param name="createSplash.screenTextFile" value="${splash.dest}/splashscreen-developer.txt"/>
            <param name="createSplash.targetScreenFile" value="${splash.dest}/ToolSessionSplashScreen.jpg"/>
        </antcall>
        <!-- Copy the splash to the Tools class path -->
        <copy file="${splash.dest}/ToolSessionSplashScreen.jpg" tofile="${build.classes}/com/seagullsw/appinterface/tools/images/ToolSessionSplashScreen.jpg" overwrite="yes"/>
    </target>
    <!-- =================================================================== -->
    <!-- Javadoc for client API -->
    <!-- =================================================================== -->
    <target name="javadoc_check.ais.client">
        <uptodate property="ais.client.javadoc.notrequired" targetfile="${ais.client.dist.javadoc}/packages.html">
            <srcfiles dir="${src.dir}">
                <patternset refid="ais.client.files"/>
            </srcfiles>
        </uptodate>
    </target>
    <target name="javadoc.ais.client" depends="prepare, javadoc_check.ais.client" unless="ais.client.javadoc.notrequired">
        <delete dir="${ais.client.dist.javadoc}" includeEmptyDirs="true" quiet="true"/>
        <mkdir dir="${ais.client.dist.javadoc}"/>
        <property name="basic-header" value="${Name}&#x2122;, AIS Client"/>
        <property name="header+version" value="${basic-header}, v${version}"/>
        <property name="win-title" value="${header+version} API Specification"/>
        <property name="doc-title" value="${header+version}&lt;br/&gt;API Specification"/>
        <javadoc packagenames="com.seagullsw.appinterface.client, com.seagullsw.appinterface.client.java, com.seagullsw.appinterface.client.ibmmq, com.seagullsw.appinterface.comm.ibmmq" sourcepath="${src.dir}" destdir="${ais.client.dist.javadoc}" windowtitle="${win-title}" doctitle="${doc-title}" header="${basic-header}" bottom="&lt;font size=&quot;-1&quot;&gt;${Name} is a trademark or registered trademarks of Seagull Holding NV in the US and other countries.&lt;br/&gt;Copyright &#169; 1993 - 2003 Seagull Business Software Ireland Ltd. All Rights Reserved.&lt;/font&gt;" author="false" version="true" use="true">
            <classpath>
                <path refid="ais.classpath"/>
            </classpath>
            <!-- The following group elements do not seem to work. -->
            <group title="Client" packages="com.seagullsw.appinterface.client, com.seagullsw.appinterface.client.java"/>
            <group title="IBM MQ Series Client" packages="com.seagullsw.appinterface.client.ibmmq, com.seagullsw.appinterface.comm.ibmmq"/>
            <link href="${javadoc.j2se.link}"/>
        </javadoc>
    </target>
    <target name="javadoc_check.ais.adminclient">
        <uptodate property="ais.adminclient.javadoc.notrequired" targetfile="${ais.adminclient.dist.javadoc}/packages.html">
            <srcfiles dir="${src.dir}">
                <patternset refid="ais.adminclient.files"/>
            </srcfiles>
        </uptodate>
    </target>
    <target name="javadoc.ais.adminclient" depends="prepare, javadoc_check.ais.adminclient" unless="ais.adminclient.javadoc.notrequired">
        <delete dir="${ais.adminclient.dist.javadoc}" includeEmptyDirs="true" quiet="true"/>
        <mkdir dir="${ais.adminclient.dist.javadoc}"/>
        <property name="basic-header" value="${Name}&#x2122;, AIS Admin Client"/>
        <property name="header+version" value="${basic-header}, v${version}"/>
        <property name="win-title" value="${header+version} API Specification"/>
        <property name="doc-title" value="${header+version}&lt;br/&gt;API Specification"/>
        <javadoc packagenames="com.seagullsw.appinterface.server.admin" sourcepath="${src.dir}" destdir="${ais.adminclient.dist.javadoc}" windowtitle="${win-title}" doctitle="${doc-title}" header="${basic-header}" bottom="&lt;font size=&quot;-1&quot;&gt;${Name} is a trademark or registered trademarks of Seagull Holding NV in the US and other countries.&lt;br/&gt;Copyright &#169; 1993 - 2003 Seagull Business Software Ireland Ltd. All Rights Reserved.&lt;/font&gt;" author="false" version="true" use="true">
            <classpath>
                <path refid="ais.classpath"/>
            </classpath>
            <!-- The following group elements do not seem to work. -->
            <group title="Client" packages="com.seagullsw.appinterface.server.admin"/>
            <link href="${javadoc.j2se.link}"/>
        </javadoc>
    </target>
    <!-- =================================================================== -->
    <!-- Distribution targets -->
    <!-- =================================================================== -->
    <target name="dist" depends="dist.ais.core, dist.ais.client, dist.aisUNIX, dist.proxyservlet, dist.transidiomcentral, dist.devtools, dist.docs" description="Creates the distribution in ${build.dist}"/>
    <property name="ais.dist" value="${build.dist}/server"/>
    <property name="aisUNIX.dist" value="${build.dist}/server-UNIX"/>
    <property name="ais.client.dist" value="${build.dist}/client/java"/>
    <property name="proxyservlet.dist" value="${build.dist}/server/servlet"/>
    <property name="devtools.dist" value="${build.dist}/tools"/>
    <property name="transidiomcentral.dist" value="${build.dist}/TransidiomCentral"/>
    <!-- copy 3rd party jar files - a dist "subroutine". -->
    <!-- Common files to the AIS and Tools? GaryG 2003-04-03 -->
    <target name="copy3rdPartyJars">
        <copy file="${xerces.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${xml-apis.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${xalan.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${soap.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${activation.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${mail.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${commons-collections.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${commons-lang.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${commons-codec.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${commons-logging.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${commons-httpclient.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${commons-pool.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${commons-cli.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jakarta-oro.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb1.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb2.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb3.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb4.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb5.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb6.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb7.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jms.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${concurrent.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaas.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${imsico.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${imsico-connector.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
        <copy file="${jta.jar}" todir="${copy3rdPartyJars.dist.lib}" preservelastmodified="true"/>
    </target>
    <!-- Java Client -->
    <property name="ais.client.dist.javadoc" value="${ais.client.dist}/docs/api"/>
    <property name="ais.client.dist.lib" value="${ais.client.dist}/lib"/>
    <property name="ais.client.dist.mq" value="${ais.client.dist}/mq"/>
    <property name="ais.adminclient.dist.javadoc" value="${ais.client.dist}/admin/docs/api"/>
    <property name="ais.adminclient.dist.sfd" value="${ais.client.dist}/admin/sfd"/>
    <!-- dist.ais.client -->
    <target name="dist.ais.client" depends="jar.ais.client, jar.ais.adminclient, javadoc.ais.client, javadoc.ais.adminclient">
        <mkdir dir="${ais.client.dist}"/>
        <mkdir dir="${ais.client.dist.javadoc}"/>
        <mkdir dir="${ais.client.dist.lib}"/>
        <mkdir dir="${ais.client.dist.mq}"/>
        <mkdir dir="${ais.adminclient.dist.javadoc}"/>
        <mkdir dir="${ais.adminclient.dist.sfd}"/>
        <copy file="${ais.client.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-adminclient.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${xerces.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${xml-apis.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${commons-lang.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb1.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb2.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb3.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb4.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb5.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb6.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb7.jar}" todir="${ais.client.dist.lib}" preservelastmodified="true"/>
        <copy file="${root.dir}/mq/MQClientConnection.properties" todir="${ais.client.dist.mq}" preservelastmodified="true"/>
        <copy todir="${ais.adminclient.dist.sfd}" preservelastmodified="true">
            <fileset dir="${src.root.dir}/ServerAdminFunctions/InterfaceSchemas"/>
        </copy>
    </target>
    <!-- AIS -->
    <property name="ais.dist.config" value="${ais.dist}/config"/>
    <property name="ais.dist.config.copy" value="${ais.dist}/config-default"/>
    <property name="ais.dist.log" value="${ais.dist.config}/log"/>
    <property name="ais.dist.transform" value="${ais.dist.config}/transform"/>
    <property name="ais.dist.lib" value="${ais.dist}/lib"/>
    <property name="ais.dist.lib.ext" value="${ais.dist.lib}/${extension.dir.name}"/>
    <property name="ais.dist.mq" value="${ais.dist}/mq"/>
    <property name="ais.dist.sys" value="${ais.dist}/system"/>
    <property name="ais.dist.sysdef" value="${ais.dist.sys}/defaults"/>
    <property name="root.serverSettings" value="${root.dir}/AlternativeServerSettings"/>
    <property name="root.toolSettings" value="${root.dir}/AlternativeToolSettings"/>
    <!-- dist.ais.core -->
    <target name="dist.ais.core" depends="init, jar.ais-core, jar.ais-tools, jar.ais-5250, jar.ais-3270, jar.ais-cobol, jar.ais-cics, jar.ais-ims, jar.hsc, jar.adminconsole, javadoc.openbackend">
        <mkdir dir="${ais.dist}"/>
        <mkdir dir="${ais.dist.lib}"/>
        <mkdir dir="${ais.dist.lib.ext}"/>
        <mkdir dir="${ais.dist.sys}"/>
        <mkdir dir="${ais.dist.mq}"/>
        <copy file="${ais-core.jar}" todir="${ais.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-5250.jar}" todir="${ais.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-3270.jar}" todir="${ais.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-cobol.jar}" todir="${ais.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-cics.jar}" todir="${ais.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-ims.jar}" todir="${ais.dist.lib}" preservelastmodified="true"/>
        <copy file="${hsc.jar}" todir="${ais.dist.lib}" preservelastmodified="true"/>
        <copy file="${adminconsole.jar}" todir="${ais.dist.lib}" preservelastmodified="true"/>
        <antcall target="copy3rdPartyJars">
            <param name="copy3rdPartyJars.dist.lib" value="${ais.dist.lib}"/>
        </antcall>
        <!-- For SCT -->
        <copy file="${ais-tools.jar}" todir="${ais.dist.lib}" preservelastmodified="true"/>
        <copy file="${root.dir}/ToolUserSettings.cfg" todir="${ais.dist}" filtering="true"/>
        <copy file="${root.dir}/start-ais.bat" todir="${ais.dist}" preservelastmodified="true"/>
        <copy file="${root.dir}/start-ais-mq.bat" todir="${ais.dist}" preservelastmodified="true"/>
        <copy file="${root.dir}/stop-ais.bat" todir="${ais.dist}" preservelastmodified="true"/>
        <copy file="${root.dir.server}/ServerSettings.cfg" todir="${ais.dist}" preservelastmodified="true"/>
        <copy file="${root.dir}/ServerBackEndSettings.cfg" todir="${ais.dist}" preservelastmodified="true"/>
        <copy file="${root.serverSettings}/ServerDebugSettings.cfg" todir="${ais.dist.sys}" filtering="true"/>
        <copy file="${root.serverSettings}/ServerDeveloperSettings.cfg" todir="${ais.dist.sys}" filtering="true"/>
        <copy file="${root.serverSettings}/ServerInstallationSettings.cfg" todir="${ais.dist.sys}" filtering="true"/>
        <copy file="${root.dir.sys}/ToolDebugSettings.cfg" todir="${ais.dist.sys}" filtering="true"/>
        <copy todir="${ais.dist.sys}/AdminFunctionDefinitions" preservelastmodified="true">
            <fileset dir="${src.root.dir}/ServerAdminFunctions/MappingSchemas"/>
        </copy>
        <copy todir="${ais.dist.transform}" preservelastmodified="true">
            <fileset dir="${root.dir.server-transform}"/>
        </copy>
        <copy todir="${ais.dist.config}/comm" preservelastmodified="true">
            <fileset dir="${root.dir.server-config}/comm"/>
        </copy>
        <copy todir="${ais.dist.config.copy}" preservelastmodified="true">
            <fileset dir="${ais.dist.config}"/>
        </copy>
        <copy file="${root.dir.server-log}/log-category.properties" todir="${ais.dist.log}" preservelastmodified="true"/>
        <copy file="${root.dir.server-log}/log-style.properties" todir="${ais.dist.log}" preservelastmodified="true"/>
        <!-- Tools files -->
        <copy file="${root.toolSettings}/ToolInstallationSettings-All.cfg" tofile="${ais.dist.sys}/ToolInstallationSettings.cfg" filtering="true"/>
        <copy file="${root.toolSettings}/SCTToolInstallationSettings-HC.cfg" todir="${ais.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/SCTToolInstallationSettings-HC3270Only.cfg" todir="${ais.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/SCTToolInstallationSettings-HC5250Only.cfg" todir="${ais.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/SCTToolInstallationSettings-CICSOnly.cfg" todir="${ais.dist.sys}" filtering="true"/>
        <copy file="${root.dir.sysdef}/AppInterfaceTester-DefaultSettings.cfg" todir="${ais.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/ClientControlled3270ServerSettings-DefaultSettings.cfg" todir="${ais.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/ClientControlled5250ServerSettings-DefaultSettings.cfg" todir="${ais.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/DefinitionTool-DefaultSettings.cfg" todir="${ais.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/SEAGULLProject.dir" todir="${ais.dist.sysdef}"/>
        <copy file="${root.dir.sysdef}/ServerControlled3270ServerSettings-DefaultSettings.cfg" todir="${ais.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/ServerControlled5250ServerSettings-DefaultSettings.cfg" todir="${ais.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/ServerOptions-DefaultSettings.cfg" todir="${ais.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/ServerSettings-Skeleton.cfg" todir="${ais.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/WorkingSetSettings.cfg" todir="${ais.dist.sysdef}" filtering="true"/>
        <!-- Java Connectors -->
        <mkdir dir="${ais.dist}/JavaConnectors/Classes"/>
    </target>
    <!-- AIS UNIX-specific -->
    <property name="aisUNIX.dist.config" value="${aisUNIX.dist}/config"/>
    <property name="aisUNIX.dist.log" value="${aisUNIX.dist.config}/log"/>
    <property name="aisUNIX.dist.lib" value="${aisUNIX.dist}/lib"/>
    <property name="aisUNIX.dist.mq" value="${aisUNIX.dist}/mq"/>
    <property name="aisUNIX.dist.sys" value="${aisUNIX.dist}/system"/>
    <target name="dist.aisUNIX" depends="init, dist.ais.core, jar.adminconsole">
        <mkdir dir="${aisUNIX.dist}"/>
        <mkdir dir="${aisUNIX.dist.lib}"/>
        <mkdir dir="${aisUNIX.dist.sys}"/>
        <mkdir dir="${aisUNIX.dist.mq}"/>
        <copy file="${ais-core.jar}" todir="${aisUNIX.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-5250.jar}" todir="${aisUNIX.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-3270.jar}" todir="${aisUNIX.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-cobol.jar}" todir="${aisUNIX.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-cics.jar}" todir="${aisUNIX.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-ims.jar}" todir="${aisUNIX.dist.lib}" preservelastmodified="true"/>
        <copy file="${adminconsole.jar}" todir="${aisUNIX.dist.lib}" preservelastmodified="true"/>
        <copy file="${hsc.jar}" todir="${aisUNIX.dist.lib}" preservelastmodified="true"/>
        <antcall target="copy3rdPartyJars">
            <param name="copy3rdPartyJars.dist.lib" value="${aisUNIX.dist.lib}"/>
        </antcall>
        <copy file="${root.dir}/UNIXServerFiles/start-ais.sh" todir="${aisUNIX.dist}" preservelastmodified="true"/>
        <copy file="${root.dir}/UNIXServerFiles/start-ais-mq.sh" todir="${aisUNIX.dist}" preservelastmodified="true"/>
        <copy file="${root.dir}/UNIXServerFiles/stop-ais.sh" todir="${aisUNIX.dist}" preservelastmodified="true"/>
        <copy file="${root.dir.server}/ServerSettings.cfg" todir="${aisUNIX.dist}" preservelastmodified="true"/>
        <copy file="${root.dir}/ServerBackEndSettings.cfg" todir="${aisUNIX.dist}" preservelastmodified="true"/>
        <copy file="${root.serverSettings}/ServerDebugSettings.cfg" todir="${aisUNIX.dist.sys}" filtering="true"/>
        <copy file="${root.dir}/UNIXServerFiles/ServerInstallationSettings.cfg" todir="${aisUNIX.dist.sys}" filtering="true"/>
        <copy todir="${aisUNIX.dist.sys}/AdminFunctionDefinitions" preservelastmodified="true">
            <fileset dir="${src.root.dir}/ServerAdminFunctions/MappingSchemas"/>
        </copy>
        <copy todir="${aisUNIX.dist}/config/transform" preservelastmodified="true">
            <fileset dir="${root.dir}/server/config/transform"/>
        </copy>
        <copy file="${root.dir.server-log}/log-category.properties" todir="${aisUNIX.dist.log}"/>
        <copy file="${root.dir.server-log}/log-style.properties" todir="${aisUNIX.dist.log}"/>
    </target>
    <!-- Proxy Servlet -->
    <property name="proxyservlet.dist.lib" value="${proxyservlet.dist}/lib"/>
    <target name="dist.proxyservlet" depends="jar.proxyservlet, jar.ais.client">
        <copy file="${proxyservlet.jar}" todir="${proxyservlet.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais.client.jar}" todir="${proxyservlet.dist.lib}" preservelastmodified="true"/>
        <copy file="${xerces.jar}" todir="${proxyservlet.dist.lib}" preservelastmodified="true"/>
        <copy file="${xml-apis.jar}" todir="${proxyservlet.dist.lib}" preservelastmodified="true"/>
        <copy file="${root.dir}/ServletConfigFiles/AISProxyServletReadme.txt" todir="${proxyservlet.dist}" preservelastmodified="true"/>
        <copy file="${root.dir}/ServletConfigFiles/web.xml" todir="${proxyservlet.dist}" preservelastmodified="true"/>
        <copy file="${doc.dir}/Transidiom HTTPS Support.doc" todir="${proxyservlet.dist}" preservelastmodified="true"/>
        <copy file="${doc.dir}/Transidiom HTTP Requests Redirection on IIS.doc" todir="${proxyservlet.dist}" preservelastmodified="true"/>
    </target>
    <!-- DevTools -->
    <property name="devtools.dist.config" value="${devtools.dist}/config"/>
    <property name="devtools.dist.log" value="${devtools.dist.config}/log"/>
    <property name="devtools.dist.lib" value="${devtools.dist}/lib"/>
    <property name="devtools.dist.sys" value="${devtools.dist}/system"/>
    <property name="devtools.dist.sysdef" value="${devtools.dist.sys}/defaults"/>
    <target name="dist.devtools" depends="init, jar.ais-core, jar.ais-tools">
        <mkdir dir="${devtools.dist}"/>
        <mkdir dir="${devtools.dist.lib}"/>
        <mkdir dir="${devtools.dist.sys}"/>
        <mkdir dir="${devtools.dist.sysdef}"/>
        <mkdir dir="${devtools.dist.log}"/>
        <copy file="${ais-tools.jar}" todir="${devtools.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-core.jar}" todir="${devtools.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-5250.jar}" todir="${devtools.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-3270.jar}" todir="${devtools.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-cobol.jar}" todir="${devtools.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-cics.jar}" todir="${devtools.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-ims.jar}" todir="${devtools.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais.client.jar}" todir="${devtools.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-adminclient.jar}" todir="${devtools.dist.lib}" preservelastmodified="true"/>
        <antcall target="copy3rdPartyJars">
            <param name="copy3rdPartyJars.dist.lib" value="${devtools.dist.lib}"/>
        </antcall>
        <!-- Root -->
        <copy file="${root.dir}/Direct Publish.bat" todir="${devtools.dist}"/>
        <copy file="${root.dir}/DirectPublish.args" todir="${devtools.dist}"/>
        <copy file="${root.dir}/Interface Definition Tool.bat" todir="${devtools.dist}"/>
        <copy file="${root.dir}/CICS Connector Builder.bat" todir="${devtools.dist}"/>
        <copy file="${root.dir}/IMS Connector Builder.bat" todir="${devtools.dist}"/>
        <copy file="${root.dir}/Interface Function Tester.bat" todir="${devtools.dist}"/>
        <copy file="${root.dir}/ToolUserSettings.cfg" todir="${devtools.dist}" filtering="true"/>
        <copy file="${binary.root.dir}/Java/Win32/Bin/Win32RegistryInterface.dll" todir="${devtools.dist}" preservelastmodified="true"/>
        <!-- system (files are in alpha order here) -->
        <copy file="${root.toolSettings}/DFPToolInstallationSettings-HC.cfg" tofile="${devtools.dist.sys}/DFPToolInstallationSettings.cfg" filtering="true"/>
        <copy file="${root.toolSettings}/SCTToolInstallationSettings-HC.cfg" todir="${devtools.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/SCTToolInstallationSettings-HC3270Only.cfg" todir="${devtools.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/SCTToolInstallationSettings-HC5250Only.cfg" todir="${devtools.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/SCTToolInstallationSettings-CICSOnly.cfg" todir="${devtools.dist.sys}" filtering="true"/>
        <copy file="${root.dir.sys}/ToolDebugSettings.cfg" todir="${devtools.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/ToolInstallationSettings-All.cfg" tofile="${devtools.dist.sys}/ToolInstallationSettings.cfg" filtering="true"/>
        <copy file="${root.toolSettings}/ToolInstallationSettings-DefToolHC.cfg" todir="${devtools.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/ToolInstallationSettings-DefToolHC3270Only.cfg" todir="${devtools.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/ToolInstallationSettings-DefToolHC5250Only.cfg" todir="${devtools.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/ToolInstallationSettings-DefToolCICSOnly.cfg" todir="${devtools.dist.sys}" filtering="true"/>
        <copy file="${root.toolSettings}/ToolInstallationSettings-DefToolIMSOnly.cfg" todir="${devtools.dist.sys}" filtering="true"/>
        <!-- system defaults -->
        <copy file="${root.dir.sysdef}/AppInterfaceTester-DefaultSettings.cfg" todir="${devtools.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/ClientControlled3270ServerSettings-DefaultSettings.cfg" todir="${devtools.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/ClientControlled5250ServerSettings-DefaultSettings.cfg" todir="${devtools.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/DefinitionTool-DefaultSettings.cfg" todir="${devtools.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/SEAGULLProject.dir" todir="${devtools.dist.sysdef}"/>
        <copy file="${root.dir.sysdef}/ServerControlled3270ServerSettings-DefaultSettings.cfg" todir="${devtools.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/ServerControlled5250ServerSettings-DefaultSettings.cfg" todir="${devtools.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/ServerOptions-DefaultSettings.cfg" todir="${devtools.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/ServerSettings-Skeleton.cfg" todir="${devtools.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.sysdef}/WorkingSetSettings.cfg" todir="${devtools.dist.sysdef}" filtering="true"/>
        <copy file="${root.dir.tools-log}/log-category.properties" todir="${devtools.dist.log}" preservelastmodified="true"/>
        <copy file="${root.dir.tools-log}/log-style.properties" todir="${devtools.dist.log}" preservelastmodified="true"/>
    </target>
    <!-- AIS Central -->
    <property name="transidiomcentral.dist.lib" value="${transidiomcentral.dist}/lib"/>
    <target name="dist.transidiomcentral" depends="init, jar.ais-core, jar.ais-tools, jar.javaconnectorgenerator, jar.securitytoolkit">
        <mkdir dir="${transidiomcentral.dist}"/>
        <mkdir dir="${transidiomcentral.dist.lib}"/>
        <copy file="${ais-core.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-5250.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-3270.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-cobol.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-cics.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-ims.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais-tools.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${ais.client.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${securitytoolkit.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${javaconnectorgenerator.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${commons-codec.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${commons-lang.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${xerces.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${xalan.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${xml-apis.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb1.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb2.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb3.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb4.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb5.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb6.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
        <copy file="${jaxb7.jar}" todir="${transidiomcentral.dist.lib}" preservelastmodified="true"/>
    </target>
    <!-- User Docs -->
    <target name="dist.docs">
        <mkdir dir="${build.dist}/docs"/>
        <copy todir="${build.dist}/docs">
            <fileset dir="${doc.dir}">
                <exclude name="Transidiom HTTP*.doc"/>
            </fileset>
        </copy>
    </target>
    <!-- =================================================================== -->
    <!-- Javadoc for open back-end API -->
    <!-- =================================================================== -->
    <property name="ais.dist.javadoc" value="${ais.dist}/JavaConnectors/Documentation/JavaDoc"/>
    <target name="javadoc.openbackend" depends="compile.doclet">
        <delete dir="${ais.dist.javadoc}" includeEmptyDirs="true" quiet="true"/>
        <mkdir dir="${ais.dist.javadoc}"/>
        <property name="basic-header" value="${Name}&#x2122;, AIS Java Connector"/>
        <property name="header+version" value="${basic-header}, v${version}"/>
        <property name="win-title" value="${header+version} API Specification"/>
        <property name="doc-title" value="${header+version}&lt;br/&gt;API Specification"/>
        <javadoc sourcepath="${src.dir}" destdir="${ais.dist.javadoc}" windowtitle="${win-title}" doctitle="${doc-title}" header="${basic-header}" bottom="&lt;font size=&quot;-1&quot;&gt;${Name} is a trademark or registered trademarks of Seagull Holding NV in the US and other countries.&lt;br/&gt;Copyright &#169; 1993 - 2003 Seagull Business Software Ireland Ltd. All Rights Reserved.&lt;/font&gt;" author="false" version="true" use="true" doclet="com.seagullsw.internaldev.tools.apidoclet.standard.Standard" docletpath="${build.classes};${java.resource.dir}">
            <!-- I don't understand it, but if I leave off the ${src.dir} below, it doesn't work. -->
            <source file="${src.dir}/com/seagullsw/appinterface/server/backend/BackEnd.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/server/backend/BackEndInfo.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/server/backend/BackEndHandler.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/server/backend/BackEndSettings.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/server/backend/Callback.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/server/backend/ClientSession.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/server/backend/InvocationContext.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/AggregateModel.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/AppInterfaceRuntimeException.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/DataElementModel.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/FieldModel.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/IllegalElementException.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/IllegalPathException.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/ModelElement.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/SequenceModel.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/StructureModel.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/data/Aggregate.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/data/DataElement.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/data/DataElementList.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/data/Field.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/data/Sequence.java"/>
            <source file="${src.dir}/com/seagullsw/appinterface/model/data/Structure.java"/>
            <classpath>
                <path refid="ais.classpath"/>
            </classpath>
            <link href="http://java.sun.com/products/jdk/1.3.1/docs/api/"/>
        </javadoc>
    </target>
    <!-- VERIFY -->
    <path id="path.AntTasks">
        <pathelement location="${junit.jar}"/>
        <pathelement location="${commons-cli.jar}"/>
        <pathelement location="${commons-httpclient.jar}"/>
        <pathelement location="${build.classes}"/>
        <pathelement location="${internaldev.classes}"/>
    </path>
    <target name="build.AntTasks">
        <mkdir dir="${internaldev.classes}"/>
        <javac srcdir="${src.test.dir}" destdir="${internaldev.classes}" debug="${compile.debug}" classpathref="path.AntTasks">
            <include name="com/seagullsw/internaldev/build/JarFileVerifier.java"/>
            <include name="com/seagullsw/internaldev/build/JarFileVerifierTask.java"/>
            <include name="com/seagullsw/internaldev/build/IsUrlOpen.java"/>
            <include name="com/seagullsw/internaldev/build/IsUrlOpenTask.java"/>
        </javac>
    </target>
    <target name="declare.AntTasks" depends="build.AntTasks">
        <taskdef name="verifyjar" classname="com.seagullsw.internaldev.build.JarFileVerifierTask" classpathref="path.AntTasks"/>
        <taskdef name="isUrlOpen" classname="com.seagullsw.internaldev.build.IsUrlOpenTask" classpathref="path.AntTasks"/>
    </target>
    <target name="prepare.test.ext">
        <mkdir dir="${test.lib}"/>
        <delete dir="${test.lib.ext}"/>
        <mkdir dir="${test.lib.ext}"/>
    </target>
    <target name="verify.ais.jar" depends="declare.AntTasks, prepare.test.ext">
        <mkdir dir="${test.fdef}"/>
        <copy file="${goXMLEngine.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <copy file="${goXMLResource.zip}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <copy file="${jdom.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <copy file="${ibm.mq.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <copy file="${ibm.mq.connector.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <copy file="${ibm.mq.jta.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <verifyjar file="${ais-core.jar}" verbose="false" debug="false">
            <classpath>
                <pathelement location="${ais.dist.lib}"/>
                <pathelement location="${ais.dist.lib.ext}"/>
                <pathelement location="${test.lib}"/>
            </classpath>
        </verifyjar>
        <delete dir="${test.lib.ext}"/>
        <delete dir="${test.fdef}"/>
    </target>
    <target name="verify.client.jar" depends="declare.AntTasks, prepare.test.ext">
        <copy file="${ibm.mq.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <copy file="${jms.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <copy file="${mail.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <copy file="${soap.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <verifyjar file="${ais.client.jar}" verbose="false" debug="false">
            <classpath>
                <pathelement location="${ais.client.dist.lib}"/>
                <pathelement location="${test.lib.ext}"/>
            </classpath>
        </verifyjar>
        <delete dir="${test.lib.ext}"/>
    </target>
    <target name="verify.5250.jar" depends="declare.AntTasks">
        <verifyjar file="${ais-5250.jar}" ignoreUnresolved="true" verbose="false" debug="false">
            <classpath location="${ais.dist.lib}"/>
        </verifyjar>
    </target>
    <target name="verify.3270.jar" depends="declare.AntTasks">
        <verifyjar file="${ais-3270.jar}" ignoreUnresolved="true" verbose="false" debug="false">
            <classpath location="${ais.dist.lib}"/>
        </verifyjar>
    </target>
    <target name="verify.cobol.jar" depends="declare.AntTasks">
        <verifyjar file="${ais-cobol.jar}" verbose="false" debug="false">
            <classpath location="${ais.dist.lib}"/>
        </verifyjar>
    </target>
    <target name="verify.cics.jar" depends="declare.AntTasks, prepare.test.ext">
        <copy file="${ctgclient.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <verifyjar file="${ais-cics.jar}" verbose="false" debug="false">
            <classpath location="${ais.dist.lib}"/>
            <classpath location="${test.lib}"/>
        </verifyjar>
        <delete dir="${test.lib.ext}"/>
    </target>
    <target name="verify.ims.jar" depends="declare.AntTasks">
        <verifyjar file="${ais-ims.jar}" verbose="false" debug="false">
            <classpath location="${ais.dist.lib}"/>
        </verifyjar>
    </target>
    <target name="verify.adminclient.jar" depends="declare.AntTasks">
        <verifyjar file="${ais-adminclient.jar}" verbose="false" debug="false">
            <classpath location="${devtools.dist.lib}"/>
        </verifyjar>
    </target>
    <target name="verify.proxyservlet.jar" depends="declare.AntTasks">
        <verifyjar file="${proxyservlet.jar}" verbose="false" debug="false">
            <classpath>
                <pathelement location="${proxyservlet.dist.lib}"/>
                <pathelement location="${servlet.dir}"/>
            </classpath>
        </verifyjar>
    </target>
    <target name="verify.adminconsole.jar" depends="declare.AntTasks">
        <verifyjar file="${adminconsole.jar}" verbose="false" debug="false">
            <classpath location="${ais.dist.lib}"/>
        </verifyjar>
    </target>
    <target name="verify.javaconnectorgenerator.jar" depends="declare.AntTasks">
        <verifyjar file="${javaconnectorgenerator.jar}" verbose="false" debug="false">
            <classpath location="${devtools.dist.lib}"/>
        </verifyjar>
    </target>
    <target name="verify.securitytoolkit.jar" depends="declare.AntTasks">
        <verifyjar file="${securitytoolkit.jar}" verbose="false" debug="false">
            <classpath location="${devtools.dist.lib}"/>
        </verifyjar>
    </target>
    <target name="verify.tools.jar" depends="declare.AntTasks, prepare.test.ext">
        <copy file="${j2se.tools.jar}" todir="${test.lib.ext}" preservelastmodified="true"/>
        <verifyjar file="${ais-tools.jar}" verbose="false" debug="false">
            <classpath location="${devtools.dist.lib}"/>
            <classpath location="${test.lib}"/>
        </verifyjar>
        <delete dir="${test.lib.ext}"/>
    </target>
    <target name="verify.gwhsc.jar" depends="declare.AntTasks">
        <verifyjar file="${hsc.jar}" verbose="false" debug="false"/>
    </target>
    <target name="verify.gwhscu.jar" depends="declare.AntTasks">
        <verifyjar file="${hscu.jar}" verbose="false" debug="false"/>
    </target>
    <target name="verify.xml" depends="banner">
        <!-- Only check for well-formed XML here. -->
        <xmlvalidate lenient="yes" warn="yes">
            <fileset dir="${build.dist}" includes="**/*.xml"/>
            <fileset dir="${build.dist}" includes="**/*.cfg"/>
            <fileset dir="${build.dist}" includes="**/*.sfd"/>
            <fileset dir="${build.dist}" includes="**/*.sjcd"/>
            <fileset dir="${build.dist}" includes="**/*.sfmd"/>
            <fileset dir="${build.dist}" includes="**/*.xsd"/>
            <fileset dir="${build.dist}" includes="**/*.xsl"/>
        </xmlvalidate>
    </target>
    <target name="verify" description="Verifies the build by performing a load tests on jar files (does not trigger the jar dependencies.)" depends="banner, verify.ais.jar, verify.client.jar, verify.5250.jar, verify.3270.jar, verify.cobol.jar, verify.cics.jar, verify.ims.jar, verify.adminclient.jar, verify.proxyservlet.jar, verify.adminconsole.jar, verify.javaconnectorgenerator.jar, verify.securitytoolkit.jar, verify.tools.jar, verify.gwhsc.jar, verify.gwhscu.jar, verify.xml"/>
    <!-- End VERIFY targets -->
    <!-- TEST TARGETS -->
    <target name="junit_check">
        <available classname="junit.framework.Test" property="junit.present"/>
        <fail message="JUnit cannot be found." unless="junit.present"/>
    </target>
    <property name="test" value="${build.dir}/test"/>
    <property name="test.bin" value="${test}/bin"/>
    <property name="test.resources" value="${test.dir}/resources"/>
    <property name="test.fdef" value="${test}/${fdef.dirname}"/>
    <property name="test.lib" value="${test}/lib"/>
    <property name="test.lib.ext" value="${test.lib}/ext"/>
    <property name="reports.dir" value="${build.dir}/reports"/>
    <property name="reports.checksum" value="${reports.dir}/checksum"/>
    <property name="junit.reports.srcdir" location="reports"/>
    <property name="junit.reports" location="${reports.dir}/junit"/>
    <property name="junit.formatter" value="xml"/>
    <property name="junit.fork" value="true"/>
    <property name="junit.printsummary" value="true"/>
    <property name="junit.includeantruntime" value="false"/>
    <property name="junit.dir" value="../.."/>
    <property name="junit.reports.xml" location="${junit.reports}/${junit.formatter}"/>
    <property name="junit.report.ext" value="-junit.xml"/>
    <target name="test.compile" description="Compiles the unit tests without triggering any dependencies.">
        <mkdir dir="${test.bin}"/>
        <javac destdir="${test.bin}" debug="${compile.debug}" includeAntRuntime="false">
            <src path="${src.test.dir}"/>
            <src path="${src.dir}/com/seagullsw/internaldev/appinterface/model"/>
            <!-- Testing framework -->
            <classpath location="${junit.jar}"/>
            <classpath location="${mtjunit.jar}"/>
            <classpath location="${xmlsec.jar}"/>
            <!-- Jars to test, which the test cases refer to. -->
            <classpath location="${ais-core.jar}"/>
            <classpath location="${proxyservlet.jar}"/>
            <classpath location="${ais.client.jar}"/>
            <classpath location="${javaconnectorgenerator.jar}"/>
            <classpath location="${securitytoolkit.jar}"/>
            <classpath location="${ais-tools.jar}"/>
            <classpath location="${ais-5250.jar}"/>
            <classpath location="${ais-3270.jar}"/>
            <classpath location="${ais-cobol.jar}"/>
            <classpath location="${ais-cics.jar}"/>
            <classpath location="${ais-ims.jar}"/>
            <classpath location="${ais-adminclient.jar}"/>
            <classpath location="${hsc.jar}"/>
            <!-- dependencies -->
            <classpath location="${ant.jar}"/>
            <classpath location="${commons-cli.jar}"/>
            <classpath location="${commons-httpclient.jar}"/>
            <classpath refid="ais.classpath"/>
            <classpath refid="proxyservlet.classpath"/>
            <classpath refid="cobol.classpath"/>
            <classpath refid="cics.backend.classpath"/>
            <classpath refid="ims.backend.classpath"/>
            <classpath refid="transforms.classpath"/>
            <classpath refid="jsse.classpath"/>
        </javac>
    </target>
    <target name="test.mkdir" depends="init">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${test}"/>
        <mkdir dir="${test.bin}"/>
    </target>
    <target name="echo.xalan.version">
        <echo level="info" message="Testing with ${TransformerFactory}"/>
        <java classname="org.apache.xalan.Version"/>
    </target>
    <target name="report.init" depends="init, test.compile">
        <mkdir dir="${junit.reports.xml}"/>
        <echo level="info" message="Reporting to ${junit.reports.xml}"/>
    </target>
    <path id="junit.classpath">
        <pathelement location="${ant.home}/lib/ant.jar"/>
        <pathelement location="${ant.home}/lib/optional.jar"/>
        <pathelement location="${ant.home}/lib/junit.jar"/>
    </path>
    <!-- Unit Tests: from low-level to high-level -->
    <!-- Unit Tests: javax.lang -->
    <target name="junit.javax.lang" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <pathelement location="${ais-tools.jar}"/>
                <pathelement location="${j2se.tools.jar}"/>
                <pathelement location="${commons-lang.jar}"/>
                <pathelement location="${test.bin}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.unittest.javax.lang.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: javax.io -->
    <target name="junit.javax.io" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <pathelement location="${commons-lang.jar}"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.javax.io.AllTests" todir="${junit.reports.xml}"/>
            <test name="com.seagullsw.unittest.javax.io.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: javax.util -->
    <target name="junit.javax.util" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <pathelement location="${test.bin}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.unittest.javax.util.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: Toolbox XML  -->
    <target name="junit.toolbox.xml" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement path="${sun.boot.class.path}"/>
                <pathelement location="${ais-core.jar}"/>
                <path refid="xml.classpath.rt"/>
                <pathelement location="${commons-lang.jar}"/>
                <pathelement location="${xmlsec.jar}"/>
                <pathelement location="${jce.jar}"/>
                <pathelement location="${log4j.jar}"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.unittest.toolbox.xml.StringProxyTestSuite" todir="${junit.reports.xml}"/>
            <test name="com.seagullsw.unittest.toolbox.xml.DocumentProxyTestSuite" todir="${junit.reports.xml}"/>
            <test name="com.seagullsw.unittest.toolbox.xml.ReadDocumentWithEncodingTestSuite" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: Toolbox config  -->
    <target name="junit.toolbox.config" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <pathelement path="${sun.boot.class.path}"/>
                <pathelement location="${ais-core.jar}"/>
                <pathelement location="${commons-lang.jar}"/>
                <pathelement location="${commons-cli.jar}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.toolbox.config.ConfigurationDirectoryTestCase" todir="${junit.reports.xml}"/>
            <test name="com.seagullsw.toolbox.config.ConfigValidatorTest" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: Toolbox logging  -->
    <target name="junit.toolbox.log" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${test.bin}"/>
                <pathelement location="${ais-core.jar}"/>
                <pathelement location="${commons-lang.jar}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.toolbox.log.LogUnitTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: config/log -->
    <target name="junit.server.config.log" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.config.bind.log.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: config/bind/threadpool -->
    <target name="junit.server.config.threadpool" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.config.bind.threadpool.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: config/bind/transform -->
    <target name="junit.server.config.transform" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <path refid="transforms.classpath"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.config.bind.transform.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: config/bind/core -->
    <target name="junit.server.config.core" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.config.bind.core.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: config/bind/management -->
    <target name="junit.server.config.management" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.config.bind.management.JaxbUnmarshalTestCase" todir="${junit.reports.xml}"/>
            <test name="com.seagullsw.appinterface.server.config.bind.management.ConfigurationDirectoryUnmarshalTestCase" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: Chameleon -->
    <target name="junit.ais-core.transforms" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement path="${sun.boot.class.path}"/>
                <pathelement location="${ais-core.jar}"/>
                <path refid="transforms.classpath"/>
                <pathelement location="${xmlsec.jar}"/>
                <pathelement location="${jce.jar}"/>
                <pathelement location="${log4j.jar}"/>
                <pathelement location="${goXMLResource.zip}"/>
                <pathelement location="${goXMLconfig.dir}"/>
                <pathelement location="${jdom.jar}"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.unittest.appinterface.transforms.ApacheXPathNamespaceTestSuite" todir="${junit.reports.xml}"/>
            <test name="com.seagullsw.unittest.appinterface.transforms.SimpleAwkTestSuite" todir="${junit.reports.xml}"/>
            <test name="com.seagullsw.unittest.appinterface.transforms.TransformationManagerBindingTestSuite" todir="${junit.reports.xml}"/>
            <test name="com.seagullsw.unittest.appinterface.transforms.TransformationManagerTestSuite" todir="${junit.reports.xml}"/>
            <test name="com.seagullsw.unittest.appinterface.transforms.GoXMLTransformationManagerTestSuite" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: com.seagullsw.appinterface.server.security.auth  -->
    <target name="junit.security.auth" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <path refid="jce.classpath.rt"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.security.auth.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: com.seagullsw.appinterface.server.crypto  -->
    <target name="junit.crypto" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <path refid="jce.classpath.rt"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.crypto.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: com.seagullsw.toolbox.net  -->
    <target name="junit.toolbox.net" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <pathelement location="${commons-codec.jar}"/>
                <pathelement location="${commons-httpclient.jar}"/>
                <pathelement location="${commons-logging.jar}"/>
                <path refid="jce.classpath.rt"/>
                <path refid="jsse.classpath"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.toolbox.net.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: com.seagullsw.unittest.appinterface.model  -->
    <target name="junit.model" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <path refid="transforms.classpath"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.unittest.appinterface.model.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <target name="junit.server" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <path refid="ims.backend.classpath"/>
                <path refid="cics.backend.classpath"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.LoadFunctionsTest" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: com.seagullsw.unittest.appinterface.server.backend.hostconnector2  -->
    <target name="junit.hostconnector2" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${ais-5250.jar}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.unittest.appinterface.server.backend.hostconnector2.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <target name="junit.backend.hsc" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <!-- The timeout is expressed in milliseconds. -->
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <path refid="jce.classpath.rt"/>
                <pathelement location="${ais-5250.jar}"/>
                <pathelement location="${ais-3270.jar}"/>
                <pathelement location="${commons-httpclient.jar}"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.config.bind.connectors.hsc.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: IMS back-end -->
    <target name="junit.backend.ims" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <!-- The timeout is expressed in milliseconds. -->
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <path refid="ims.backend.classpath"/>
                <path refid="jce.classpath.rt"/>
                <pathelement location="${ais-ims.jar}"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.config.bind.connectors.ims.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <target name="junit.backend.ims.live" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <!-- The timeout is expressed in milliseconds. -->
        <junit printsummary="${junit.printsummary}" fork="true" timeout="45000" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <path refid="ims.backend.classpath"/>
                <path refid="jce.classpath.rt"/>
                <pathelement location="${ais-ims.jar}"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.backend.ims.AllLiveImsIcoTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Unit Tests: CICS back-end -->
    <target name="junit.backend.cics" depends="junit.backend.cics.common, junit.backend.cics.ctg.live, junit.backend.cics.hb, junit.backend.cics.hb.live"/>
    <target name="junit.backend.cics.common" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <path refid="jce.classpath.rt"/>
                <pathelement location="${ais-cics.jar}"/>
                <pathelement location="${ctgclient.jar}"/>
                <pathelement location="${commons-httpclient.jar}"/>
                <pathelement location="${commons-logging.jar}"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.config.bind.connectors.cics.AllTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <target name="junit.backend.cics.ctg.live" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <!-- The timeout is expressed in milliseconds. -->
        <junit printsummary="${junit.printsummary}" fork="true" timeout="600000" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <pathelement location="${ais-cics.jar}"/>
                <pathelement location="${ctgclient.jar}"/>
                <pathelement location="${commons-httpclient.jar}"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.backend.cics.AllLiveIbmCtgTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <target name="junit.backend.cics.hb" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="${junit.fork}" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <pathelement location="${ais-cics.jar}"/>
                <pathelement location="${commons-httpclient.jar}"/>
                <pathelement location="${commons-logging.jar}"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.backend.cics.HostBridgeByteBufferStrategyTest" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <target name="junit.backend.cics.hb.live" depends="report.init">
        <mkdir dir="${junit.reports.xml}"/>
        <junit printsummary="${junit.printsummary}" fork="true" timeout="600000" dir="${junit.dir}" includeantruntime="${junit.includeantruntime}">
            <formatter type="${junit.formatter}" extension="${junit.report.ext}"/>
            <classpath>
                <pathelement location="${ais-core.jar}"/>
                <path refid="ais.classpath"/>
                <pathelement location="${ais-cics.jar}"/>
                <pathelement location="${commons-httpclient.jar}"/>
                <pathelement location="${commons-logging.jar}"/>
                <pathelement location="${test.bin}"/>
                <pathelement location="${test.resources}"/>
                <path refid="junit.classpath"/>
            </classpath>
            <test name="com.seagullsw.appinterface.server.backend.cics.AllLiveHostBridgeTests" todir="${junit.reports.xml}"/>
        </junit>
    </target>
    <!-- Clean reports -->
    <target name="junit.report.clean">
        <delete dir="${junit.reports}"/>
    </target>
    <!-- Create the unit tests report -->
    <target name="junit.report" depends="init">
        <mkdir dir="${junit.reports}"/>
        <property name="junit.reports.frames" location="${junit.reports}/frames"/>
        <property name="junit.reports.noframes" location="${junit.reports}/noframes"/>
        <mkdir dir="${junit.reports.xml}"/>
        <mkdir dir="${junit.reports.frames}"/>
        <mkdir dir="${junit.reports.noframes}"/>
        <echo level="info" message="Compiling all reports to ${junit.reports}..."/>
        <junitreport todir="${junit.reports.xml}">
            <fileset dir="${junit.reports.xml}">
                <include name="**/*${junit.report.ext}"/>
            </fileset>
            <report format="noframes" todir="${junit.reports.noframes}"/>
            <report format="frames" todir="${junit.reports.frames}"/>
        </junitreport>
        <echo level="info" message="The XML report is in: ${junit.reports.xml}"/>
        <echo level="info" message="The HTML report (with frames) is in: ${junit.reports.frames}"/>
        <echo level="info" message="The HTML report (no frames) is in: ${junit.reports.noframes}"/>
        <!-- Rename file to index.html -->
        <move file="${junit.reports.noframes}/junit-noframes.html" tofile="${junit.reports.noframes}/index.html"/>
        <!-- Copy test reports home page -->
        <copy file="${junit.reports.srcdir}/index.html" todir="${reports.dir}" overwrite="true" filtering="true"/>
        <copy todir="${reports.dir}/images" overwrite="true">
            <fileset dir="${junit.reports.srcdir}/images"/>
        </copy>
        <antcall target="report.checksums"/>
    </target>
    <target name="report.checksums">
        <antcall target="copy-checksums"/>
        <property name="temp.index" value="${reports.dir}/index-temp.html"/>
        <xslt in="${reports.dir}/index.html" out="${temp.index}" force="true" style="${junit.reports.srcdir}/apply-data.xslt">
            <param name="reportDir" expression="${reports.dir}"/>
        </xslt>
        <delete file="${reports.dir}/index.html"/>
        <move file="${temp.index}" tofile="${reports.dir}/index.html"/>
    </target>
    <target name="junit.javax" depends="junit.javax.io, junit.javax.util, junit.javax.lang"/>
    <target name="junit.server.config" depends="junit.server.config.log, junit.server.config.threadpool, junit.server.config.transform, junit.server.config.core, junit.server.config.management"/>
    <target name="junit.toolbox" depends="junit.toolbox.config, junit.toolbox.xml, junit.toolbox.net, junit.toolbox.log"/>
    <target name="junit.ais-core" depends="junit.javax, junit.toolbox, junit.server.config, junit.ais-core.transforms, junit.security.auth, junit.crypto, junit.model, junit.server"/>
    <target name="junit.backend" depends="junit.backend.hsc, junit.backend.ims, junit.backend.ims.live, junit.backend.cics, junit.hostconnector2"/>
    <target name="test" description="Runs the tests." depends="init, test.compile, junit.report.clean, junit.ais-core, junit.backend, junit.report"/>
    <!-- Build and Zip -->
    <target name="zip" depends="dist" description="Creates the final ${zip-file} (does it all)">
        <property name="zip-file" location="${build.dir}/${zipFileBaseName}-build${build.id}.zip"/>
        <delete file="${zip-file}" quiet="true"/>
        <zip zipfile="${zip-file}" basedir="${build.dist}"/>
    </target>
    <target name="nightly-build" depends="init, clean, dist, verify, test" description="Creates a nightly build (does it all)">
    </target>
</project>